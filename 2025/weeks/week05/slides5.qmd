---
subtitle: ""
title: "<font style='font-size:0.75em;'>üóìÔ∏è Week 05<br/>Improving Workflow for Reproducible Social Science</font>"
author: Dr [Burak Sonmez](#)
institute: '[University College London](#)'
date: 31 November 2025
date-meta: 31 November 2025
date-format: "DD MMM YYYY"
toc: true
toc-depth: 1
toc-title: "What we will cover today:"
center-title-slide: false
from: markdown+emoji
format:
  revealjs: 
    fig-responsive: true
    theme: simple
    slide-number: true
    mouse-wheel: false
    preview-links: auto
    logo: /figures/icons/course_favicon.png
    css: /css/styles_slides.css
    footer: 'SOCS0100 -- Computational Social Science'
editor: 
  markdown: 
    wrap: 72
---

# Creating reports with Quarto

## Intro to Quarto {.smaller}

-   Quarto provides a unified authoring framework for data science,
    combining your code, its results, and your prose

-   Quarto documents are fully reproducible and support dozens of output
    formats, like PDFs, Word files, presentations, and more

-   Quarto is a command line interface tool, not an R package

-   If you have any question how to use Quarto in the future, you should
    refer to the [Quarto documentation](https://quarto.org/).

## Setup {.smaller}

-   You need the Quarto command line interface (Quarto CLI), but you
    don't need to explicitly install it or load it, as RStudio
    automatically does both when needed

## Quarto CLI {.smaller}

<img src="/figures/images/quarto.png" alt="Source:" width="400" height="350" style="display: block; margin: 0 auto;"/>

## Quarto visual editor {.smaller}

<img src="/figures/images/quarto1.png" alt="Source:" width="400" height="400" style="display: block; margin: 0 auto;"/>

## Quarto basics {.smaller}

-   You'll see a Quarto file next slide -- a plain text file that has
    the extension `.qmd:`

-   It contains three important types of content:

    -   An (optional) YAML header surrounded by ---s
    -   Chunks of R code surrounded by \`\`\`
    -   Text mixed with simple text formatting like \# heading and
        *italics*

## `.qmd` example {.smaller}

``` r
---
title: "Diamond sizes"
date: 2023-03-10
format: html
---
```

``` r
#| label: setup
#| include: false

library(tidyverse)

smaller <- diamonds |> 
  filter(carat <= 2.5)

smaller |> 
  ggplot(aes(x = carat)) + 
  geom_freqpoly(binwidth = 0.01)
```

## `.qmd` with notebook interface {.smaller}

-   To produce a complete report containing all text, code, and results,
    click "Render" or press `Cmd/Ctrl + Shift + K`. You can also do this
    programmatically with
    `quarto::quarto_render("docname.qmd") --to html/pdf`

<img src="/figures/images/quarto3.png" alt="Source:" width="400" height="400" style="display: block; margin: 0 auto;"/>

## Diagram of Quarto workflow {.smaller}

-   When you render the document, Quarto sends the `.qmd` file to
    `knitr`, https://yihui.org/knitr/, which executes all of the code
    chunks and creates a new markdown (.md) document which includes the
    code and its output

-   The markdown file generated by knitr is then processed by `pandoc`,
    https://pandoc.org, which is responsible for creating the finished
    file

<img src="/figures/images/quarto4.png" alt="Source:" width="350" height="150" style="display: block; margin: 0 auto;"/>

## Pandoc fenced divs {.smaller}

**Structure**:

-   Start and end with equal number of : - minimum of 3 :::

-   Add curly brackets to indicate the start/end of class `{.class}` or
    `{sometimes-class}`

``` r
::: {.class}
All this content can be modified
:::
```

``` r
::: {layout-ncol=2}

![](image.png){fig-alt="Description of image 1"}

![](image2.png){fig-alt="Description of image 1"}
:::
```

## Tabsets {.smaller}

-   You can pplit up and flip between sections of a page, rather than
    having two columns for instance

``` r
::: {.panel-tabset}

## Element 1
...content...

## Element 2
...content...
:::
```

## Tabsets example {.smaller}

::: panel-tabset
## Code

```{r}
#| echo: fenced
#| eval: false
head(mtcars)
```

## Output

```{r}
#| eval: true
#| echo: false
head(mtcars)
```
:::

<img src="/figures/images/quarto5.png" alt="Source:" width="250" height="250" style="display: block; margin: 0 auto;"/>

## Footnotes {.smaller}

-   You can create inline footnotes like so:
    `some inline text with a^[footnote]`

-   If you hover your mouse over the citation and footnote in this
    sentence you'll see a popup displaying the reference contents:

``` r
format:
  html:
    citations-hover: true
    footnotes-hover: true
```

``` r
For example, did you know that Howard is a dog^[he is a Boston Terrier]?
```

## Coming back to source editor {.smaller}

``` r
## Text formatting

*italic* **bold** ~~strikeout~~ `code`

superscript^2^ subscript~2~

[underline]{.underline} [small caps]{.smallcaps}

## Headings

# 1st Level Header

## 2nd Level Header

### 3rd Level Header

## Lists

-   Bulleted list item 1

-   Item 2

    -   Item 2a

    -   Item 2b

1.  Numbered list item 1

2.  Item 2.
    The numbers are incremented automatically in the output.

## Links and images

<http://example.com>

[linked phrase](http://example.com)

![optional caption text](quarto.png){fig-alt="Quarto logo and the word quarto spelled in small case letters"}

## Tables

| First Header | Second Header |
|--------------|---------------|
| Content Cell | Content Cell  |
| Content Cell | Content Cell  |
```

## Embedding code chunks {.smaller}

To run code inside a Quarto document, you need to insert a chunk. There
are three ways to do so:

1.  The keyboard shortcut Cmd + Option + I / Ctrl + Alt + I.

2.  The "Insert" button icon in the editor toolbar.

3.  By manually typing the chunk delimiters `{r} and`.

## Managing code chunks {.smaller}

**Labeling them**:

``` r
#| label: simple-addition

1 + 1
```

**Customising chunk output**:

-   `eval`: false prevents code from being evaluated. (And obviously if
    the code is not run, no results will be generated). This is useful
    for displaying example code, or for disabling a large block of code
    without commenting each line

-   `include`: false runs the code, but doesn't show the code or results
    in the final document. Use this for setup code that you don't want
    cluttering your report

-   `echo`: false prevents code, but not the results from appearing in
    the finished file. Use this when writing reports aimed at people who
    don't want to see the underlying R code.

-   `message`: false or warning: false prevents messages or warnings
    from appearing in the finished file.

## Global options {.smaller}

-   You can do this by adding the preferred options in the document
    YAML, under execute. For example, if you are preparing a report for
    an audience who does not need to see your code but only your results
    and narrative, you might set echo: false at the document level

Hide code:

``` r
---
title: "My report"
execute:
  echo: false
---
```

Fold code:

``` r
---
format:
  html:
    code-fold: true
    code-summary: "Hidden code"
---    
```

## Aesthetics (HTML appearence) {.smaller}

-   Quarto comes pre-installed with 25 themes from
    [Bootswatch](https://bootswatch.com/) and you can use them like so:

``` r
---
format:
  html:
    theme: litera
---
```

-   Or you can customise a theme with CSS/SCSS/SASS

``` r
---
format:
  html:
    theme: 
      - litera
      - custom.scss
---
```

Pdf articles:

``` r
---
format:
  pdf:
    template: mytemplate.tex
---
```

## Figures {.smaller}

-   To embed an image from an external file, you can use the Insert menu
    in the Visual Editor in RStudio and select Figure / Image

-   If you include a code chunk that generates a figure (e.g., includes
    a `ggplot()` call), the resulting figure will be automatically
    included in your Quarto document

## Figure sizing {.smaller}

-   There are five main options that control figure sizing:
    `fig-width, fig-height, fig-asp, out-width and out-height`

**Recommended options**:

-   Plots tend to be more aesthetically pleasing if they have consistent
    width. To enforce this, set `fig-width`: 6 (6") and `fig-asp`: 0.618
    (the golden ratio) in the defaults. Then in individual chunks, only
    adjust `fig-asp`

-   Control the output size with `out-width` and set it to a percentage
    of the body width of the output document. We suggest to `out-width`:
    "70%" and `fig-align`: center

-   To put multiple plots in a single row, set the `layout-ncol` to 2
    for two plots, 3 for three plots, etc. This effectively sets
    `out-width` to "50%" for each of your plots if `layout-ncol` is 2,
    "33%" if `layout-ncol` is 3, etc.

## Tables {.smaller}

-   You can include two types of tables in a Quarto document: directly
    in your Quarto document (using the Insert Table menu) or they can be
    tables generated as a result of a code chunk

```{r}
#| include: true
#| echo: true
mtcars[1:5, ]
```

-   If you prefer that data be displayed with additional formatting you
    can use the `knitr::kable()` function

## Bibliographies and Citations {.smaller}

-   To add a citation using the visual editor, go to Insert \> Citation.
    Citations can be inserted from a variety of sources:

I suggest particularly two ways:

1.  DOI (Document Object Identifier) references

2.  Your document bibliography (a .bib file in the directory of your
    document)

-   If you add a citation using the first method, the visual editor will
    automatically create a bibliography.bib file for you and add the
    reference to it

-   It will also add a bibliography field to the document YAML. As you
    add more references, this file will get populated with their
    citations

# Creating presentations with Quarto

## Presentations with format: revealjs {.smaller}

Quarto comes with 10 built-in themes:

`beige, blood, dark, default, league, moon, night, serif, simple, sky, solarized`

``` r
---
title: "Presentation"
format:
  revealjs: 
    theme: [simple, custom.scss]
---
```

## Absolute positioning {.smaller}

Absolute position allows for tight control of placement

``` r
::: {.absolute bottom=25 left=100 .fragment}

![](images/howard-gentleman.jpeg){width=150 fig-alt="Howard dressed as a victorian gentleman"}

:::
```

## `output-location`: column-fragment

`#| output-location: column-fragment`

```{r}
#| output-location: column-fragment
#| echo: true
library(ggplot2)

ggplot(mtcars, aes(x = mpg, y = disp)) +
  geom_point()
```

## Footer/Logo {.smaller}

``` r
---
format:
  revealjs:
    logo: "pic1.png"
    footer: "Footer text"
---
```

``` r
---
format:
  revealjs:
    logo: "https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png"
    footer: "[Reports and Presentations with Quarto](https://xxxxx.com/)"
---
```

## Slide background {.smaller}

``` r
## Slide Background {background-color="black" background-image="images/howard-gentleman.jpeg" background-size="100px" background-repeat="repeat"}
```

| Attribute               | Deafult   | Description                                                                                      |
|-----------------|-----------------|---------------------------------------|
| \`background-image\`    |           | URL of the image to show. GIFs restart when the slide opens                                      |
| \`background-size\`     | cover     | See [background-size](https://developer.mozilla.org/docs/Web/CSS/background-size) on MDN         |
| \`background-position\` | center    | See [background-position](https://developer.mozilla.org/docs/Web/CSS/background-position) on MDN |
| background-repeat       | no-repeat | See [background-repeat](https://developer.mozilla.org/docs/Web/CSS/background-repeat) on MDN     |
| background-opacity      | 1         | Opacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque           |

: Slide background

## Further materials {.smaller}

**Reports**:

-   [Quarto docs:
    Documents](https://quarto.org/docs/output-formats/html-basics.html)

**Presentations**:

-   [Quarto docs: Presentations](https://quarto.org/docs/presentations/)

-   

    {{< video https://youtu.be/_f3latmOhew? width="600" height="300">}}

## Lab exercise {.smaller}

-   Create a new Quarto document using File \> New File \> Quarto
    Document. Read the instructions. Practice running the chunks
    individually

-   Practice what you've learned in the lecture by creating a very short
    report. The title should be your name, and you should include
    headings for each step in your report

-   Using any R in-built dataset, you will come up with one data
    wrangling task (e.g. filtering and summarising) to run its code
    inside your Quarto document (e.g. code chunk). Make sure that your
    report should include both code and output

-   Using the same R in-built dataset, you will come up with one data
    visualisation (e.g. `ggplot`) to run its code inside your Quarto
    document (e.g. code chunk). Make sure that your report should
    include both code and output

-   Finally, render your Quarto report in both HTML and PDF format
