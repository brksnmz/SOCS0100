[
  {
    "objectID": "2025/syllabus/rsyllabus/syllabus.html",
    "href": "2025/syllabus/rsyllabus/syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Day\nTime\nLocation\n\n\n\n\nLecture\nFridays\n10:00 - 12:00\nIOE Bedford Way (20) - 642\n\n\nLab A\nFridays\n12:00 - 13:00\nIOE Bedford Way (20) - 642"
  },
  {
    "objectID": "2025/syllabus/rsyllabus/syllabus.html#module-info",
    "href": "2025/syllabus/rsyllabus/syllabus.html#module-info",
    "title": "Syllabus",
    "section": "",
    "text": "Day\nTime\nLocation\n\n\n\n\nLecture\nFridays\n10:00 - 12:00\nIOE Bedford Way (20) - 642\n\n\nLab A\nFridays\n12:00 - 13:00\nIOE Bedford Way (20) - 642"
  },
  {
    "objectID": "2025/syllabus/rsyllabus/syllabus.html#learning-objectives",
    "href": "2025/syllabus/rsyllabus/syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter completing the module students should be able to:\n\nFamiliarised with foundations and applications of social data science.\nEquipped with the skills to understand computational tools for reproducible research.\nAware of the potential and pitfalls of social data science."
  },
  {
    "objectID": "2025/syllabus/rsyllabus/syllabus.html#where-to-get-help",
    "href": "2025/syllabus/rsyllabus/syllabus.html#where-to-get-help",
    "title": "Syllabus",
    "section": "Where to get help",
    "text": "Where to get help\n\nIf you have a question during lecture, feel free to ask it!\nOutside of class, any general questions about course content or assignments should be posted on the Moodle course forum.\nEmails should be reserved for questions not appropriate for the public forum. If you email me, please include the name of our course in the subject line."
  },
  {
    "objectID": "2025/syllabus/rsyllabus/syllabus.html#weekly-topics",
    "href": "2025/syllabus/rsyllabus/syllabus.html#weekly-topics",
    "title": "Syllabus",
    "section": "Weekly topics",
    "text": "Weekly topics\n🗓️ Week 1: Introduction to Computational Social Science\nIntroduction to computational social science and open science: data and code sharing, project management, and collaborations – the use of git and GitHub. This week students will be introduced how they can set up their own GitHub account and subscribe to the module organisation to engage with both individual and group assignments throughout the module.\n📚 Required readings:\nEdelman, A., Wolff, T., Montagne, D. & Bail, C. A. (2020). Computational Social Science and Sociology, Annual Review of Sociology.\nBryan, J. (2018), Happy Git and GitHub for the useR, GitHub. URL: https://happygitwithr.com.\n💻 Problem set:\nStudents will be shown the features of version control system through R and GitHub, and we will discuss their advantages in social data science.\n🗓️ Week2: Computational Thinking and Reproducibility\nThis week will introduce students to how to think computationally, data structures, and project workflow (linking R projects to GitHub), focusing on reproducibility. Students will also be shown how to load and update relevant data science libraries into R.\n📚 Required readings:\nChristensen, G., Freese, J., & Miguel, E. (2019). Transparent and Reproducible Social Science Research: How to Do Open Science. University of California Press. (Chapter 10 & 11).\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for data science. ” O’Reilly Media, Inc.”. (Chapter 6).\n💻 Problem set:\nStudents will create an RStudio project with a solid workflow, while practicing the principles of reproducibility.\n🗓️ Week3: Wrangling and Tidying Data\nHow to effectively use Tidyverse – the key R functions for data wrangling. This week will introduce students to tidying data in R. This will include learning about transforming data frames; tidying data in a specific format; merging and appending multiple datasets; and other aspects of data manipulation.\n📚 Required readings:\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for data science. ” O’Reilly Media, Inc.”. (Chapter 7, 9, and 10).\nWickham, H., Averick, M., Bryan, J., Chang, W., McGowan, L. D. A., François, R., … & Yutani, H. (2019). Welcome to the Tidyverse. Journal of open source software, 4(43), 1686.\n💻 Problem set:\nStudents will be working with real world datasets to complete a series of data wrangling tasks through Tidyverse packages.\n🗓️ Week4: Automating (functional programming)\nThe aim of this week is to introduce students to more advanced programming, such as familiarity with conditional flow (e.g. if-else conditionals) and creating functions to automate some common tasks for data wrangling and plotting. Students will be shown how they can use these functions in data science projects to make their project workflow more efficient.\n📚 Required readings:\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for data science. ” O’Reilly Media, Inc.”. (Chapter 15 & 17).\n💻 Problem set:\nStudents will be asked to use computational tools to automate repeated things in their entire R workflow (e.g., wrangling, visualisation).\n🗓️ Week5: Improving Workflow for Reproducible Social Science\nStudent will learn how to combine code, output, and analysis into a single reproducible document through Quarto. They will also learn how to customise appearance and style in reproducible documents. This will help students deliver their assessments in different reproducible output formats.\n📚 Required readings:\nBauer, P. C., & Landesvatter, C. (2023). Writing a reproducible paper with RStudio and Quarto.\n💻 Problem set:\nStudents will complete certain tasks to create a single reproducible document through Quarto.\n🗓️ Week6: From Reproducibility to Interactivity\nStudents will learn advanced data visualisation tools. They will specifically learn how to build and deploy Shiny apps to create interactive data visualisations. This will help students create interactive dashboards to disseminate their data in the projects.\n📚 Required readings:\nWickham, H. (2021). Mastering shiny. ” O’Reilly Media, Inc.”. (Chapter 1, 2, 3, and 7).\n💻 Problem set:\nStudents will build their own interactive dashboards through Shiny apps.\n🗓️ Week7: Automated Data Collection I\nIntroduction to automated data collection with R (rvest package). This week students will be introduced the concepts of ethical Webscraping and semi-structured data in detail, such as HTML (e.g., websites) and XML (e.g., government data).\n📚 Required readings:\nHalavais, A. (2019). Overcoming terms of service: a proposal for ethical distributed research. Information, Communication & Society, 22(11), 1567-1581.\nWickham, H. (2019). rvest: Easily harvest (scrape) web pages. Retrieved from https://CRAN.Rproject.org/package=rvest.\n💻 Problem set:\nStudents will extract some texts, links, and tables from static webpages.\n🗓️ Week8: Automated Data Collection II\nWebscraping part 2 with RSelenium library. Students will learn how to scrape dynamic webpages that pull data from databases using Javascript. They will simulate web browsing rather than parsing static pages.\n📚 Required readings:\nBreuer, J., Bishop, L., & Kinder-Kurlanda, K. (2020). The practical and ethical challenges in acquiring and sharing digital trace data: Negotiating public-private partnerships. New Media & Society, 22(11), 2058-2080.\nHarrison J (2022). RSelenium: R Bindings for ‘Selenium WebDriver’. R package version 1.7.9, https://docs.ropensci.org/RSelenium/.\n💻 Problem set:\nStudents will extract various types of data from a dynamic webpage.\n🗓️ Week9: Working with APIs\nStudents will be introduced multiple APIs to collect data from digital platforms and how they can access them through R.\n📚 Required readings:\nBruns, A. (2019). After the ‘APIcalypse’: Social media platforms and their fight against critical scholarly research. Information, Communication & Society, 22(11), 1544-1566.\nPrado-Román, C., Gómez-Martínez, R., & Orden-Cruz, C. (2021). Google Trends as a predictor of presidential elections: The United States versus Canada. American Behavioral Scientist, 65(4), 666- 680.\n💻 Problem set:\nStudents will set up a developer account to access APIs to pull data from the platforms.\n🗓️ Week10: Overview and Review\nWe will discuss the extent to which the methods we cover on the module and how they can further practice these computational methods with real-world data alongside acquired project management skills. We will have a Q&A session on the final assessment."
  },
  {
    "objectID": "2025/syllabus/rsyllabus/syllabus.html#teams",
    "href": "2025/syllabus/rsyllabus/syllabus.html#teams",
    "title": "Syllabus",
    "section": "Teams",
    "text": "Teams\nYou will be assigned to a team at the beginning of the term.\nAll team members are expected to contribute to the completion of the lab practicals.You are expected to make use of the provided GitHub repository as the central collaborative platform."
  },
  {
    "objectID": "2025/syllabus/rsyllabus/syllabus.html#assessment",
    "href": "2025/syllabus/rsyllabus/syllabus.html#assessment",
    "title": "Syllabus",
    "section": "Assessment",
    "text": "Assessment\nYou will be assessed for this module through two assessments each worth 50%. The details of the assessments are below. The assessment briefs will be released in due time with detailed instructions and tasks.\n\n\n\nAssessment\nLength\n% Final grade\nDeadline\n\n\n\n\nAssignment 1\n1500 words\n50\n4 Nov 25, 1pm\n\n\nAssignment 2\n1500 words\n50\n12 Jan 26, 1pm\n\n\n\nPlanning, time-management and the meeting of deadlines are part of the personal and professional skills expected of all students. For this reason, UCL expects students to submit all coursework by the published deadline date and time.\nIf a student experiences something, which prevents them from meeting a deadline that is sudden, unexpected, significantly disruptive and beyond their control, they should apply for an Extenuating Circumstances (EC) on Portico. If the request is accepted, the student may be granted an extension."
  },
  {
    "objectID": "2025/syllabus/rsyllabus/syllabus.html#course-policies",
    "href": "2025/syllabus/rsyllabus/syllabus.html#course-policies",
    "title": "Syllabus",
    "section": "Course policies",
    "text": "Course policies\n\nAcademic integrity\nWriting assignments can be both an enjoyable and challenging experience. One aspect of writing that students often struggle with is plagiarism: the unacknowledged presentation of a person’s thoughts, words, artefacts or software as though they were their own original work. It is even possible to plagiarise yourself if you are citing a work you submitted elsewhere. Direct quotations from published or unpublished works (including internet sources) must always be clearly identified as such by being placed inside quotation marks, and a full reference to their source must be provided in the proper form, including the page reference. Equally, if a student summarises another person’s ideas or judgements, they must refer to that person in the text, and include the work to which they have referred in the bibliography. Failure to observe these rules may result in an allegation of plagiarism.\n\n\nCollaboration policy\nOnly work that is clearly assigned as team work should be completed collaboratively.\n\nThe summative assessments must be completed individually and you are welcome to discuss the assignment with classmates at a high level (e.g., discuss what’s the best way for approaching a problem, what functions are useful for accomplishing a particular task, etc.). However, you should not directly share answers (including any code) with anyone other than myself.\n\n\n\nAI-usage policy\nIn this module/assignment, students are permitted to use ChatGPT for specific defined processes within the assessment.\nThis can be utilised to enhance and support the development of specific skills in specific ways, as specified by the module leader and required by the assessment. As per the requirements, for instance, students are asked to use ChatGPT for critically evaluating their code in automated data collection, data processing, and creating interactive dashboards in this assessment. In doing so, students are expected to highlight instances where ChatGPT offers insightful solutions, refined code, or worsens student’s solutions and code.\nExcept critical engagement with ChatGPT through code refinement, this module prohibits all other use of artificial intelligence (AI), including large language models, to author or co-author formative or summative work. This prohibition includes the following practices and any practices similar to them:\n\nWriting parts or all of an assessment;\nGenerating outlines, structures and high-level arguments for essays;\nRewriting or paraphrasing text from other sources for use in written work.\n\nLanguage and writing review are not prohibited, defined as having a third-party or software check areas of academic writing such as structure, fluency, presentation, grammar, spelling, punctuation, and language translation. However, language review may be considered Academic Misconduct if substantive changes to content have been made by the reviewer or software or at their recommendation, which would suggest that the reviewer or software had either produced or determined the substantive content of the work.\nIncluding content generated by AI tools will not be considered academic misconduct only if it is clearly signposted (by, for example, quotation marks) and attributed (by including a reference to the tool and date of use). However, similarly to quoting Wikipedia, quoting an AI system is unlikely to be a valuable addition to your work and unless clearly relevant to an argument may negatively impact the perceived quality of your work.\nSuspected use of AI technologies other than specified one in the assessment may lead students to be subject to an Investigatory Viva.\n\n\nLate submission policy\nThe due dates for assignments are there to help you keep up with the course material. However, I understand that things come up periodically that could make it difficult to submit an assignment by the deadline. Here are the rules for late submissions:\n\nAssignments may be submitted up to 2 working days late. There will be a 10 percentage points deduction or one Letter Grade, yet no lower than 40% or Grade D. If it is submitted up to 2-5 working days late, mark is capped at 40% or Grade D. If it is submitted more than 5 working days late, you receive a mark of 1% or Grade E.\n\nIf there are important circumstances that prevent you from completing an assignment by the stated due date, you should apply to an Extenuating Circumstances (EC) on Portico before the deadline."
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#what-is-an-api",
    "href": "2025/weeks/week09/slides9.html#what-is-an-api",
    "title": "🗓️ Week 09Working with APIs",
    "section": "What is an API?",
    "text": "What is an API?\n\nAPI stands for Application Programming Interface.\n\na set of rules and procedures that facilitate interactions between computers and their applications\n\nA very common type of API is the Web API\n\nallows users to query a remote database over the internet\n\nWeb APIs take on a variety of formats\n\nRepresentational State Transfer or REST\nwe can use them to query databases using URLs"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#restful-web-apis",
    "href": "2025/weeks/week09/slides9.html#restful-web-apis",
    "title": "🗓️ Week 09Working with APIs",
    "section": "RESTful Web APIs",
    "text": "RESTful Web APIs\n\nThey are all around you\n\nconsider a simple Google search:\n\n\n\n\nEver wonder what all that extra stuff in the address bar was all about?\n\nthe full address is Google’s way of sending a query to its databases requesting information related to the search term “university college london”"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#anatomy-of-api",
    "href": "2025/weeks/week09/slides9.html#anatomy-of-api",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Anatomy of API",
    "text": "Anatomy of API\n\n\nAPI = Application Programming Interface\n\na set of structured http requests that return data in a lightweight format\n\nHTTP = Hypertext Transfer Protocol\n\nhow browsers and e-mail clients communicate with servers"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#when-or-why-we-should-use-apis",
    "href": "2025/weeks/week09/slides9.html#when-or-why-we-should-use-apis",
    "title": "🗓️ Week 09Working with APIs",
    "section": "When or why we should use APIs",
    "text": "When or why we should use APIs\nAdvantages:\n\nPure data collection: avoid malformed HTML, no legal issues, clear data structures\nStandardised data access procedures: transparency, replicability\nRobustness: benefits from wisdom of the crowds\n\nDisadvantages:\n\nThey’re not always available\nDependency on API providers\nLack of natural connection to R"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#decision-in-scraping",
    "href": "2025/weeks/week09/slides9.html#decision-in-scraping",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Decision in scraping",
    "text": "Decision in scraping"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#types-of-apis",
    "href": "2025/weeks/week09/slides9.html#types-of-apis",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Types of APIs",
    "text": "Types of APIs\n\nRESTful APIs: queries for static information at current moment (e.g. user profiles, posts, etc.)\nStreaming APIs: real time data (e.g. new tweets, weather alerts)\nAPIs often have extensive documentation:\nwritten for developers, what to look for: endpoints and parameters: API Documentation\nmost APIs are rate-limited: restrictions on number of API calls by user/IP address and period of time\ncommercial APIs may impose a monthly fee\nList of APIs in case you need inspiration\nRate-limit your requests (sys.sleep() in loop"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#reponse-formats-json",
    "href": "2025/weeks/week09/slides9.html#reponse-formats-json",
    "title": "🗓️ Week 09Working with APIs",
    "section": "(Reponse) Formats: JSON",
    "text": "(Reponse) Formats: JSON\n\nResponse often in JSON or XML format\n\n‘http_type(#)’: Check format\n\nJSON (Javascript Object Notation, *.json)\n\nStructure: Data stored in key-value pairs. Why? Lightweight, more flexible than traditional table format\nvarious data types possible (strings, numbers etc.)\ncurly brackets embrace objects; square brackets enclose arrays (vectors)\n\nobjects ({“name”: “peter”,“phone”:“397483”})\narrays ([1910, 1911])\n\n\n‘jsonlite’ package: Use fromJSON function to read JSON data into R\n\nmany packages have their own specific functions to read data in JSON format"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#reponse-formats-xml",
    "href": "2025/weeks/week09/slides9.html#reponse-formats-xml",
    "title": "🗓️ Week 09Working with APIs",
    "section": "(Reponse) Formats: XML",
    "text": "(Reponse) Formats: XML\n\nXML (eXtensibleMarkupLanguage, *.xml)\n\nplain text format like JSON\nsyntax of choice for many newly designed document formats (Word documents!)\nlooks like HTML but has purpose to store data: Markup (mostly tags) & content\n\n\nJson vs XML:"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#getting-api-access",
    "href": "2025/weeks/week09/slides9.html#getting-api-access",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Getting API Access",
    "text": "Getting API Access\n\nMost APIs requires a key or other user credentials before you can query their database\nGetting credentialised with a API requires that you register with the organization\nMost APIs are set up for developers, so you will likely be asked to register an application\nOnce you have successfully registered, you will be assigned one or more keys, tokens, or other credentials that must be supplied to the server as part of any API call you make"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#using-apis-in-r",
    "href": "2025/weeks/week09/slides9.html#using-apis-in-r",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Using APIs in R",
    "text": "Using APIs in R\nThere are two ways to collect data through APIs in R:\n\nPlug-n-play packages:\n\nMany common APIs are available through user-written R Packages. These packages offer functions that “wrap” API queries and format the response. These packages are usually much more convenient than writing our own query\n\nWriting our own API request\n\nIf no wrapper function is available, we have to write our own API request and format the response ourselves using R. This is trickier, but definitely doable"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#collecting-google-trends",
    "href": "2025/weeks/week09/slides9.html#collecting-google-trends",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Collecting Google Trends",
    "text": "Collecting Google Trends\nSetup:\nlibrary(pacman)\npacman::p_load('httr', 'gtrendsR', 'ggplot2',\n'dplyr', 'ggmap')\n\nThe API is provided by Google\n\nwith Google Trends, one gets access to a largely unfiltered sample of actual search topics (up to 36h before your search) and a filtered and representative sample for search topics older than 36 hours starting from the year 2004\n\nThe data is anonymised\n\ncan be obtained from different Google products like “Web search”, “News”, “Images”, “Shopping” and “Youtube”\ncan be filtered by different categories to get the data for the correct meaning of the word\naggregated, which means that the searches of all cities/regions are aggregated to the federal state level, country level or world level"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#google-trends-data",
    "href": "2025/weeks/week09/slides9.html#google-trends-data",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Google Trends Data",
    "text": "Google Trends Data\n\nThe results you get are a standardised measure of search volume for single search terms, a combination of search terms using operators (see below), or comparisons (one input in relation to the other inputs) over a selected time period\nGoogle calculates how much search volume in each region a search term or query had, relative to all searches in that region. Using this information, Google assigns a measure of popularity to search terms (scale of 0 - 100), leaving out repeated searches from the same person over a short period of time and searches with apostrophes and other special characters]\n\n\n\n\n\n\n\nNo quotation marks (e.g. Humanitarian crisis)\nYou get results for each word in your query\n\n\nQuotation marks (e.g. “Humanitarian crisis”)\nYou get results for the coherent search phrase\n\n\nPlus sign (e.g. humanitarian +crisis)\nServes as function of an OR-operator\n\n\nMinus sign (e.g. humanitarian -crisis)\nExcludes word after the operator"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#api-access-in-r",
    "href": "2025/weeks/week09/slides9.html#api-access-in-r",
    "title": "🗓️ Week 09Working with APIs",
    "section": "API access in R",
    "text": "API access in R\n\nIt can be used without an API key by anyone for free directly in the internet browser\n\nExample using httr package:\nlibrary(httr)\nGET(\"https://trends.google.com/trends/explore\",\n    query=list(q = \"Humanitarian\",geo = \"GB\"))\n\nbut just html-output, I recommend to use the gtrendsR package"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#using-gtrendsr-package",
    "href": "2025/weeks/week09/slides9.html#using-gtrendsr-package",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Using gtrendsR Package",
    "text": "Using gtrendsR Package\n\n\n\nVisualising google search activity for the word “vaccine fraud” and “vaccine danger” in UK\n\n\n\ndata(\"countries\") # get abbreviations of all countries to filter data \ndata(\"categories\") # get numbers of all categories to filter data \n\n#Combination using dplyr and ggplot\ntrend &lt;- gtrends(keyword=\"vaccine\", geo=c(\"GB\"), time = \"2021-01-01 2021-12-30\", gprop=\"web\") \n\ntrend_df &lt;- trend$interest_over_time\n\ntrend_df &lt;- trend_df %&gt;%\n    mutate(hits = as.numeric(hits), date = as.Date(date)) %&gt;%\n    replace(is.na(.), 0)\n\nggplot(trend_df, aes(x=date, y=hits, group=geo, col=geo)) + geom_line(size=2) +\nscale_x_date(date_breaks = \"2 months\" , date_labels = \"%b-%y\") +\nlabs(color= \"Countries\") +\nggtitle(\"Frequencies for the query -vaccine harm- in the period: 2021-01-01 - 2021-12-3\")\n\n#if gtrendsR package doesn't work, try trendecon package \nlibrary(trendecon)\nx &lt;- ts_gtrends(keyword = c(\"vaccine fraud\", \"vaccine danger\"), geo = c(\"GB\"), time = \"today+5-y\",\n  retry = 5,\n  wait = 10)\n\ntsbox::ts_plot(x)"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#using-google-maps-api",
    "href": "2025/weeks/week09/slides9.html#using-google-maps-api",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Using Google Maps API",
    "text": "Using Google Maps API\n\nggmap uses Google Maps behind the scenes, so you’ll need an active Google Cloud Platform account (see here if you cannot figure out)\n\nenable the following APIs under APIs and Services – Library:\n\nMaps JavaScript API\nMaps Static API\nGeocoding API"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#how-to-use-ggmap-with-google-maps-api",
    "href": "2025/weeks/week09/slides9.html#how-to-use-ggmap-with-google-maps-api",
    "title": "🗓️ Week 09Working with APIs",
    "section": "How to use ggmap with Google Maps API",
    "text": "How to use ggmap with Google Maps API\n\n\n#Authorisation with API Key\nkey &lt;-\"yourAPIkey\"\nregister_google(key = key)\n\n#Drawing the route \nroute_data &lt;- trek(\"washington\", \"las vegas\", structure = \"route\")\nhead(route_data)\n\n#Mapping\nqmap(zoom = 4) + \n  geom_path(\n    aes(x = lon, y = lat), color = \"blue\", size = 1, data = route_data\n  )"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#using-openstreetmap-api",
    "href": "2025/weeks/week09/slides9.html#using-openstreetmap-api",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Using OpenStreetMap API",
    "text": "Using OpenStreetMap API\n\nOpenstreetMap (OSM) is a free and open map of the world created largely by voluntary contribution of millions of people around the world\nOSM serves two APIs, namely Main API for editing OSM, and Overpass API for providing OSM data\nOSM data is stored as a list of attributes tagged in key - value pairs of geospatial objects (points, lines or polygons)\nFor example, for charities, the key is “office”, and the value is “charity”\n\naccess an extensive list of key-value pairs through OSM Wiki Map features"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#mapping-charities-in-london-through-osm",
    "href": "2025/weeks/week09/slides9.html#mapping-charities-in-london-through-osm",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Mapping charities in London through OSM",
    "text": "Mapping charities in London through OSM\n#Setup\npacman::p_load('osmdata', 'sf', 'tidyverse', 'leaflet') \nThe first step is to define a bounding box of the geographical area we are interested in. It is defined by four geographic coordinates, representing the minimum and maximum latitude and longitude of the area\nbb &lt;- getbb (\"london uk\")\nlondon_rst &lt;- opq(bb) %&gt;% #gets bounding box\nadd_osm_feature(key = \"office\", value = \"charity\") %&gt;% #searches for charities\nosmdata_sf() #download OSM data as sf (simple features -- spatial data format in R)"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#looking-into-the-osmdata-object",
    "href": "2025/weeks/week09/slides9.html#looking-into-the-osmdata-object",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Looking into the osmdata object",
    "text": "Looking into the osmdata object\n\nIn osm_points and osm_polygons you see various information related to charities. It’s because the information about restaurants are entered either as restaurants and polygons\n\nhead(london_rst$osm_polygons)$name\n\n#select name and geometry for charities\nrst_osm_points &lt;- london_rst$osm_points %&gt;% #select point data from downloaded OSM data\n  select(name, geometry) #for now just selecting the name and geometry to plot\n\nrst_osm_polygons &lt;- london_rst$osm_polygons %&gt;%\n  select(name, geometry)\n\nlondon_charities &lt;- rbind(rst_osm_points, rst_osm_polygons)\n\nOpenStreetMap found 729 observations as charities"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#visualising-locations-of-charities",
    "href": "2025/weeks/week09/slides9.html#visualising-locations-of-charities",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Visualising locations of charities",
    "text": "Visualising locations of charities\n\n\nleaflet() %&gt;%\n  addPolygons(\n    data = london_rst$osm_polygons,\n    label = london_rst$osm_polygons$name\n  ) %&gt;% \n  addCircles(\n    data = london_rst$osm_points,\n    label = london_rst$osm_points$name\n  ) %&gt;% \n  addProviderTiles(\"CartoDB.Positron\")"
  },
  {
    "objectID": "2025/weeks/week09/slides9.html#lab-exercise-and-further-materials",
    "href": "2025/weeks/week09/slides9.html#lab-exercise-and-further-materials",
    "title": "🗓️ Week 09Working with APIs",
    "section": "Lab exercise and further materials",
    "text": "Lab exercise and further materials\n\nVisualise location of pubs in Greater London, using OpenStreetMap API\n\nFurther texts:\n\nAutomated data collection with R\n\nBonus Tutorial: Spotify API:\n\n\n\n\nSOCS0100 – Computational Social Science"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#what-is-a-dynamic-webpage",
    "href": "2025/weeks/week08/slides8.html#what-is-a-dynamic-webpage",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "What is a dynamic webpage",
    "text": "What is a dynamic webpage\n\nDynamic pages are the ones that display custom content\n\ndifferent visitors might see different content on the same page at the same URL\ndepending on their own input (e.g. clicks, scrolls)\n\nDifficult to scrape as page content changes without the URL changing!!\nDynamic pages are scraped typically in three steps\n\nuse an additional package, RSelenium"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#three-steps-to-dynamically-scrape",
    "href": "2025/weeks/week08/slides8.html#three-steps-to-dynamically-scrape",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Three steps to dynamically scrape",
    "text": "Three steps to dynamically scrape\n\nCreate the desired instance of the dynamic page with the RSelenium package\n\nclicking, scrolling, filling in forms, from within R\n\nGet the source code into R\n\nRSelenium downloads XML\nrvest turns it into HTML\n\nExtract the exact information needed from the source code with the the rvest package"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#r-selenium",
    "href": "2025/weeks/week08/slides8.html#r-selenium",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "R Selenium",
    "text": "R Selenium\n\nUse R as browser control to simulate your behavior\n\nscrape dynamically rendered web pages\n\nOriginally developed for web testing purposes\n\nautomates browsing across platforms\n\n\nIt allows interacting with two things: - with browsers on your computer (e.g. opening a browser and navigating to a page) - with elements on a webpage (e.g. opening and clicking on a drop-down menu)"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#how-rselenium-works",
    "href": "2025/weeks/week08/slides8.html#how-rselenium-works",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "How RSelenium works",
    "text": "How RSelenium works\n\nStarting server and browser session\nNavigating to page\nFinding elements\nSending events to elements\nGetting the source code and extracting information"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#key-examples-of-what-you-can-do-with-selenium",
    "href": "2025/weeks/week08/slides8.html#key-examples-of-what-you-can-do-with-selenium",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Key examples of what you can do with Selenium",
    "text": "Key examples of what you can do with Selenium\n\n\n\n\n\n\n\nAction\nCode\n\n\n\n\nOpen a browser\nopen() / navigate()\n\n\nClick on something\nclickElement()\n\n\nEnter values\nsendKeysToElement()\n\n\nGo to previous/next page\ngoBack() / goForward()\n\n\nRefresh the page\nrefresh()\n\n\nGet all the HTML that is currently\ndisplayed\ngetPageSource()"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#installation-issues",
    "href": "2025/weeks/week08/slides8.html#installation-issues",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Installation issues",
    "text": "Installation issues\n\nJava not installed\n\n\nIf you have a message saying that “Java is not found” (or similar), you need to install Java:\n\nYou can download Java here\n\n\n\nFirefox not installed/found\n\n\nIf you have a message saying “Could not open firefox browser”, two possible explanations:\n\nif Firefox is not installed, install it the same way as Java on the previous slide\nif Firefox is installed but not found, it probably means that it wasn’t installed with admin rights, so you need to manually specify the location of the file:\n\n\ndriver &lt;- rsDriver(\n  browser = \"firefox\", \n  extraCapabilities = list(\n    `moz:firefoxOptions` = list(\n      binary = \"C:\\\\Users\\\\&lt;USERNAME&gt;\\\\AppData\\\\Local\\\\Mozilla Firefox\\\\firefox.exe\"\n    )\n  )\n)"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#stopping-selenium",
    "href": "2025/weeks/week08/slides8.html#stopping-selenium",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Stopping Selenium",
    "text": "Stopping Selenium\n\nThe clean way to stop Selenium is to run driver$server$stop()\nIf you close the browser by hand and try to re-run the script, you may receive the following error:\n\n\"Error in wdman::selenium(port = port, verbose = verbose, version = version,: \nSelenium server signals port = 4567 is already in use.\"\n\nTo avoid this error, you also need to run driver$server$stop()"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#browsers-starting-a-server",
    "href": "2025/weeks/week08/slides8.html#browsers-starting-a-server",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Browsers (starting a server)",
    "text": "Browsers (starting a server)\n\n\n\nUse the rsDriver function to start a server, so that you can control a web browser from within R\nNote that the defaults can cause errors, such as trying to start two servers from the same port\nNote that rsDriver() creates a client and a server the code singles out the client, with which our code will interact client is best thought as the browser itself it has the class of remoteDriver\n\n\nConnecting to browser\ndriver &lt;- rsDriver(port = 4567L, browser = \"firefox\")\nremDr &lt;- driver$client"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#navigating-to-page",
    "href": "2025/weeks/week08/slides8.html#navigating-to-page",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Navigating to page",
    "text": "Navigating to page\n\nSimplest way to navigate is to use URL of page, but we can also refresh, navigate forward and backward\nNavigate is called a method, not a function. Hence, it cannot be piped %&gt;% into remDr. Please use the dollar sign $ notation instead\n\nremDr$Navigate(\"http://somewhere.com\")\n\n# Other commands\nremDr$goBack() #Go back to the previous URL\nremDr$goForward() #Go forward\nremDr$refresh() #Refresh the page\nremDr$getCurrentUrl() #Get the URL of the current page\nremDr$getTitle() #Get the title of the current page"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#browser-closing-and-opening",
    "href": "2025/weeks/week08/slides8.html#browser-closing-and-opening",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Browser closing and opening",
    "text": "Browser closing and opening\n\nClose the browser\n\nwhich won’t close the session on the server\nrecall that we have singled the client out\n\n\nremDr$close()\n\nOpen a new browser\n\nwhich doesn’t require the rsDriver function because the server is still running\n\n\nbrowser$open()"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#finding-elements",
    "href": "2025/weeks/week08/slides8.html#finding-elements",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Finding elements",
    "text": "Finding elements\n\n\n\nIf you want to use elements (e.g. clicking on the element), you need to find & assign them to an object\n\nall commands to this element will be performed using that environment, not the remoteDriver environment\nyou should name it well! – webElem is a common name\n\nNote that\n\nthe default selector is xpath\nrequires entering the xpath value\n\n\n\nfindElement(using = \"xpath\", \n            value\n            )\n\nObjects can be found by css selector, x-path, id or class, by name, by (partial) link text (anchor elements / links)"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#find-selectors",
    "href": "2025/weeks/week08/slides8.html#find-selectors",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Find selectors",
    "text": "Find selectors\n\nIf there were a button created by the following code,\n\n&lt;button class=\"big-button\" id=\"only-button\" name=\"clickable\"&gt;Click Me&lt;/button&gt;\n\nany of those lines below would find it\n\nremDr$findElement(using = \"xpath\", value = '//*[(@id = \"only-button\")]')\nremDr$findElement(using = \"css selector\", value = \".big-button\")\nremDr$findElement(using = \"css\", value = \"#only-button\")\nremDr$findElement(using = \"id\", value = \"only-button\")\nremDr$findElement(using = \"name\", value = \"clickable\")\n\nSave elements as R objects to be interacted later on\n\nWebElem &lt;- remDr$findElement(using = ..., value = ...)"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#highlighting-elements-you-find",
    "href": "2025/weeks/week08/slides8.html#highlighting-elements-you-find",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Highlighting elements you find",
    "text": "Highlighting elements you find\nHighlight the element found in the previous step, with the highlightElement method\n# navigate to a page\nremDr$navigate(\"https://r-project.org\")\n# find the element\nContributors &lt;- remDr$findElement(using = \"link text\", value = \"Contributors\")\n# highlight it to see if we found the correct element\nContributors$highlightElement()"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#clicking-on-the-element",
    "href": "2025/weeks/week08/slides8.html#clicking-on-the-element",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Clicking on the element",
    "text": "Clicking on the element\n\nClick on the element found in the previous step, with the clickElement method\n\n# navigate to a page\nremDr$navigate(\"http://example.com\")\n# find an element\nsearch_icon &lt;- remDr$findElement(using = \"css\", value = \".fa-search\")\n# click on it\nsearch_icon$clickElement()"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#providing-inputs-to-elements",
    "href": "2025/weeks/week08/slides8.html#providing-inputs-to-elements",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Providing input(s) to element(s)",
    "text": "Providing input(s) to element(s)\n\nYou can provide input to elements, such as text, with the value argument; keyboard presses; or mouse gestures, with the key argument\nNote that user provides values while the selenium keys are pre-defined\n\nsendKeysToElement(list(value, key))\n# scrolling a bit\nwebElem$sendKeysToElement(list(key = \"down_arrow\"))\n# scrolling to end of page\nwebElem &lt;- remDr$findElement(\"css\", \"body\")\nwebElem$sendKeysToElement(list(key = \"end\"))"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#selenium-keys",
    "href": "2025/weeks/week08/slides8.html#selenium-keys",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Selenium keys",
    "text": "Selenium keys\nHere is the list of Selenium keys:\n\n\n\nThe downloaded binary packages are in\n    /var/folders/3b/f__hzkkn7h187ymsbptz__mw0000gn/T//RtmpAWLS9k/downloaded_packages\n\n\n\nThe downloaded binary packages are in\n    /var/folders/3b/f__hzkkn7h187ymsbptz__mw0000gn/T//RtmpAWLS9k/downloaded_packages\n\n\n [1] \"null\"         \"cancel\"       \"help\"         \"backspace\"    \"tab\"         \n [6] \"clear\"        \"return\"       \"enter\"        \"shift\"        \"control\"     \n[11] \"alt\"          \"pause\"        \"escape\"       \"space\"        \"page_up\"     \n[16] \"page_down\"    \"end\"          \"home\"         \"left_arrow\"   \"up_arrow\"    \n[21] \"right_arrow\"  \"down_arrow\"   \"insert\"       \"delete\"       \"semicolon\"   \n[26] \"equals\"       \"numpad_0\"     \"numpad_1\"     \"numpad_2\"     \"numpad_3\"    \n[31] \"numpad_4\"     \"numpad_5\"     \"numpad_6\"     \"numpad_7\"     \"numpad_8\"    \n[36] \"numpad_9\"     \"multiply\"     \"add\"          \"separator\"    \"subtract\"    \n[41] \"decimal\"      \"divide\"       \"f1\"           \"f2\"           \"f3\"          \n[46] \"f4\"           \"f5\"           \"f6\"           \"f7\"           \"f8\"          \n[51] \"f9\"           \"f10\"          \"f11\"          \"f12\"          \"command_meta\""
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#searching-a-keyword-example",
    "href": "2025/weeks/week08/slides8.html#searching-a-keyword-example",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Searching a keyword (example)",
    "text": "Searching a keyword (example)\n# navigate to the home page\nremDr$navigate(\"http://example.com/\")\n\n# find the search icon and click on it\nsearch_icon &lt;- remDr$findElement(using = \"css\", value = \".fa-search\")\nsearch_icon$clickElement()\n\n# find the search bar on the new page and click on it\nsearch_bar &lt;- browser$findElement(using = \"css\", value = \"#search-query\")\nsearch_bar$clickElement()\n\n# search for the keyword \"R Package\" and click enter\nsearch_bar$sendKeysToElement(list(value = \"R Package\", key = \"enter\"))"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#source-code-and-extracting-information",
    "href": "2025/weeks/week08/slides8.html#source-code-and-extracting-information",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Source code and extracting information",
    "text": "Source code and extracting information\n\nScreenshots\n\ncentral to working with headless browsers\n\nGetting source code\n\npreferable option: download HTML page source and save it for extraction\n\ndirectly extracting elements from RSelenium session\n\nfindElements() / findElement() for selection of nodes\ngetElementText() for extracting text from individual nodes\n\n\n# screen shots\nremDr$screenshot(display = TRUE)\n# getting source code\nremDr$getPageSource()\n# directly extracting elements\nwebElem &lt;- remDr$findElements(using = \"class\", value=\"results\")\nvalues &lt;- webElem[[1]]$getElementText()"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#setup",
    "href": "2025/weeks/week08/slides8.html#setup",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Setup",
    "text": "Setup\nif (!requireNamespace(\"pacman\", quietly = TRUE)) install.packages(\"pacman\")\n\npacman::p_load(\n  RSelenium,\n  rvest,\n  purrr,\n  dplyr,\n  ggplot2,\n  plotly,\n  countrycode\n)"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#scraping-step-by-step",
    "href": "2025/weeks/week08/slides8.html#scraping-step-by-step",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Scraping step by step",
    "text": "Scraping step by step\n\nUsing the element inspector, we see that the table is a dynamic table\n\nthe data of interest are in table rows &lt;tr&gt; of class base ng-scope\n\nConnecting to browser\n\ndriver &lt;- rsDriver(browser = \"firefox\")\nremote_driver &lt;- driver$client\n\nNavigating to the page\n\nurl &lt;- \"https://www.forbes.com/real-time-billionaires\"\nremote_driver$navigate(url)"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#clicking-on-the-accept-cookies-element",
    "href": "2025/weeks/week08/slides8.html#clicking-on-the-accept-cookies-element",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Clicking on the “accept cookies” element",
    "text": "Clicking on the “accept cookies” element\n\nwebElems &lt;- remote_driver$findElements(using = \"xpath\", '/html/body/div/div/div/div/div[2]/button[2]')\n\nwebElems[[1]]$clickElement()\n\nSys.sleep(5) # wait for page loading\n\nSlow down the code where necessary, with the Sys.sleep\n\nfor ethical reasons\nbecause R might be faster than the browser"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#lets-get-the-table-from-the-browser",
    "href": "2025/weeks/week08/slides8.html#lets-get-the-table-from-the-browser",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Let’s get the table from the browser",
    "text": "Let’s get the table from the browser\nmain &lt;- remote_driver$findElements(using = \"css\", value = \".fbs-table\")\ntable &lt;- read_html(main[[1]]$getElementAttribute(\"outerHTML\")[[1]]) # get html\n\nAnd use rvest to extract the lines of the table:\n\ntable  %&gt;% html_nodes(xpath = \"//tr[@class='base ng-scope']\")\n\nAs this is a dynamic table, we need to scroll it down to get more results"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#scrolling-all-the-way-down",
    "href": "2025/weeks/week08/slides8.html#scrolling-all-the-way-down",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Scrolling all the way down",
    "text": "Scrolling all the way down\n\nUse sendKeysToElement\n\nwebElem &lt;- remote_driver$findElement(\"css\", \".scrolly-table\")\nwebElem$sendKeysToElement(list(key = \"end\"))\n\nmain &lt;- remote_driver$findElements(using = \"css\", value = \".fbs-table\")\nSys.sleep(1)\ntable &lt;- read_html(main[[1]]$getElementAttribute(\"outerHTML\")[[1]]) # get html\ntable  %&gt;% html_nodes(xpath = \"//tr[@class='base ng-scope']\")"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#automating-the-scrolling-task",
    "href": "2025/weeks/week08/slides8.html#automating-the-scrolling-task",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Automating the scrolling task",
    "text": "Automating the scrolling task\n\nWe get 50 more lines each time we scroll down. Let’s scroll down 50 times:\n\nwebElem &lt;- remote_driver$findElement(\"css\", \".scrolly-table\")\nfor (i in 1:50) {\n  cat(\"Scroll\", i, \"\\n\")\n  webElem$sendKeysToElement(list(key = \"end\"))\n  Sys.sleep(3)\n}"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#parsing-the-html-of-the-table-to-get-all-the-lines",
    "href": "2025/weeks/week08/slides8.html#parsing-the-html-of-the-table-to-get-all-the-lines",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Parsing the html of the table to get all the lines:",
    "text": "Parsing the html of the table to get all the lines:\nmain &lt;- remote_driver$findElements(using = \"css\", value = \".fbs-table\")\ntable &lt;- main[[1]]$getElementAttribute(\"outerHTML\")[[1]] # get html\n# get all lines with attributes\n\n# Assuming 'table' is the HTML content\nhtml &lt;- read_html(table)\n\n# Select the rows with class 'base ng-scope'\ndata &lt;- html %&gt;% html_nodes(xpath = \"//tr[@class='base ng-scope']\")"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#extracting-data-from-the-table",
    "href": "2025/weeks/week08/slides8.html#extracting-data-from-the-table",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Extracting data from the table",
    "text": "Extracting data from the table\n\nForming the data frame:\n\n# Extract data from each column and create a data-frame with all columns\nforbes2023 &lt;- tibble(\n  name &lt;- data %&gt;% html_nodes(xpath = \"//td[@class='name']\") %&gt;% html_text(),\n  rank &lt;- data %&gt;% html_nodes(xpath = \"//td[@class='rank']\") %&gt;% html_text(),\n  money &lt;- data %&gt;% html_nodes(xpath = \"//td[@class='Net Worth']\") %&gt;% html_text(),\n  age &lt;- data %&gt;% html_nodes(xpath = \"//td[@class='age']\") %&gt;% html_text(),\n  source &lt;- data %&gt;% html_nodes(xpath = \"//td[@class='source']\") %&gt;% html_text(),\n  country &lt;- data %&gt;% html_nodes(xpath = \"//td[@class='Country/Territory']\") %&gt;% html_text() \n)\n\nTidying the data frame\n\n# Replace empty cells with NA for the entire data frame\nforbes2023 &lt;- forbes2023 %&gt;% mutate_all(~ ifelse(. == \"\", NA, .))\n\n# Clean and convert 'money' to numeric\nforbes2023$money &lt;- as.numeric(gsub(\"\\\\$|B\", \"\", forbes2023$money))"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#bonus-material-dataviz",
    "href": "2025/weeks/week08/slides8.html#bonus-material-dataviz",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Bonus material (DataViz)",
    "text": "Bonus material (DataViz)\n\nLet’s create a choropleth map to visualise billionaires’ wealth distribution by country\n\n# Aggregate money by country\ntotal_money_by_country &lt;- aggregate(money ~ country, data = forbes2023, sum)\n\n# Convert country names to ISO codes for mapping\niso_country &lt;- countrycode(total_money_by_country$country, \"country.name\", \"iso3c\")\n\n# Create an interactive choropleth map\nplot_ly(\n  locations = iso_country,\n  z = total_money_by_country$money,\n  text = paste(\"Country: \", total_money_by_country$country, \"&lt;br&gt;Net Worth: $\", total_money_by_country$money, \"B\"),\n  type = \"choropleth\",\n  colorscale = \"Viridis\"\n) %&gt;%\n  layout(\n    title = \"Billionaires' Wealth Distribution by Country\",\n    geo = list(\n      showframe = FALSE,\n      projection = list(type = 'mercator')\n    )\n  )"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#billionaires-wealth-distribution-by-country",
    "href": "2025/weeks/week08/slides8.html#billionaires-wealth-distribution-by-country",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Billionaires’ Wealth Distribution by Country",
    "text": "Billionaires’ Wealth Distribution by Country"
  },
  {
    "objectID": "2025/weeks/week08/slides8.html#further-materials",
    "href": "2025/weeks/week08/slides8.html#further-materials",
    "title": "🗓️ Week 08Automated Data Collection II",
    "section": "Further materials",
    "text": "Further materials\nFurther texts:\n\nAutomated data collection with R\n\nTutorials:\n\nRSelenium\n\n\n\n\n\nSOCS0100 – Computational Social Science"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#what-is-semi-structured-data",
    "href": "2025/weeks/week07/slides7.html#what-is-semi-structured-data",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "What is semi-structured data?",
    "text": "What is semi-structured data?\n\nIt does not conform to a data model but has some structure\nIt is not stored in rows and columns\nThis type of data contains tags and elements (Metadata) which is used to group data and describe how the data is stored\nSimilar entities are grouped together and organised in a hierarchy\n\nExamples: HTML (e.g. websites), XML (e.g. government data), JSON (e.g. social media API)"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#what-is-webscraping",
    "href": "2025/weeks/week07/slides7.html#what-is-webscraping",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "What is webscraping?",
    "text": "What is webscraping?\nExtracting data from webpages:\n\nIncreasing amount of data is available on websites:\nSpeeches, sentences, biographical information\nSocial media data, newspaper articles, forums\nGeographic information, conflict data, climate data\nprocess of extracting this information automatically and transforming it into a structured dataset"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#data-revolution",
    "href": "2025/weeks/week07/slides7.html#data-revolution",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Data revolution",
    "text": "Data revolution"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#webscraping-benefits",
    "href": "2025/weeks/week07/slides7.html#webscraping-benefits",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Webscraping benefits",
    "text": "Webscraping benefits\n\nAny content that can be viewed on a webpage can be scraped\nNo API needed\nNo rate-limiting or authentication (usually)"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#webscraping-challenges",
    "href": "2025/weeks/week07/slides7.html#webscraping-challenges",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Webscraping challenges",
    "text": "Webscraping challenges\n\nRarely tailored for researchers\nMessy, unstructured, inconsistent\nEntirely site-dependent\nSites change their layout all the time"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#ethics-in-webscraping",
    "href": "2025/weeks/week07/slides7.html#ethics-in-webscraping",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Ethics in webscraping",
    "text": "Ethics in webscraping\n\nCheck a site’s terms and conditions before scraping. Some websites disallow scrapers on robots.txt file\nConsider non-intrusive ways to gather data. Don’t exhaust the site’s server\nData protection: data means traces of individuals\nSecure storage vs. deletion of data\nAnonymisation of users\nReview these ethical webscraping tips"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#html---basics",
    "href": "2025/weeks/week07/slides7.html#html---basics",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "HTML - basics",
    "text": "HTML - basics\n\nThe core of a website is HTML (Hyper Text Markup Language)\nHTML defines the structure of a webpage using a series of elements. HTML elements tell the browser how to display the page by labeling pieces of content: “This is a heading,” “this is a paragraph,” “this is a link,” etc.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Page title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;Hello world!&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#html---elements",
    "href": "2025/weeks/week07/slides7.html#html---elements",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "HTML - elements",
    "text": "HTML - elements\nAn HTML element is defined by a start tag, some content, and an end tag\n\n\n\n\nTag\nMeaning\n\n\n\n\n&lt;head&gt;\npage header (metadata, etc.)\n\n\n&lt;body&gt;\nholds all of the content\n\n\n&lt;p&gt;\nregular text (paragraph)\n\n\n&lt;h1&gt;,&lt;h2&gt;,&lt;h3&gt;\nheader text, levels 1, 2, 3\n\n\nol,,&lt;ul&gt;,&lt;li&gt;\nordered list, unordered list, list item\n\n\n&lt;a href=\"page.html\"&gt;\nlink to “page.html”\n\n\n&lt;table&gt;,&lt;tr&gt;,&lt;td&gt;\ntable, table row, table item\n\n\n&lt;div&gt;,&lt;span&gt;\ngeneral containers"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#html---attributes",
    "href": "2025/weeks/week07/slides7.html#html---attributes",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "HTML - attributes",
    "text": "HTML - attributes\n\nAll HTML elements can have attributes\nattributes provide additional information about an element\nthey are included inside the tag\nExamples:\n\n&lt;img src=\"no_smiley.jpg\" alt=\"Image that does not exist.\"&gt; &lt;p style=\"color:red\"&gt;This is a paragraph.&lt;/p&gt;"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#html---attributes-ii",
    "href": "2025/weeks/week07/slides7.html#html---attributes-ii",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "HTML - attributes II",
    "text": "HTML - attributes II"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#css",
    "href": "2025/weeks/week07/slides7.html#css",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "CSS",
    "text": "CSS\n\nCSS stands for Cascading Style Sheet. CSS defines how HTML elements are to be displayed\nHTML came first. But it was only meant to define content, not format it. While HTML contains tags like &lt;font&gt; and &lt;color&gt;, this is a very inefficient way to develop a website. Some websites can easily contain 100+ individual pages, each with their own HTML code\nCSS was created specifically to display content on a webpage. Now, one can change the look of an entire website just by changing one file\nMost web designers litter the HTML markup with tons of classes and ids to provide “hooks” for their CSS\nYou can piggyback on these to jump to the parts of the markup that contain the data you need"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#css-anatomy",
    "href": "2025/weeks/week07/slides7.html#css-anatomy",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "CSS anatomy",
    "text": "CSS anatomy\n\nSelectors:\n\nElement selector: p\nClass selector: p class=\"blue\"\nI.D. selector: p id=\"blue\"\n\nDeclarations:\n\nSelector: p\nProperty: background-color\nValue: yellow"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#css-anatomy-ii",
    "href": "2025/weeks/week07/slides7.html#css-anatomy-ii",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "CSS anatomy II",
    "text": "CSS anatomy II"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#css-html",
    "href": "2025/weeks/week07/slides7.html#css-html",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "CSS + HTML",
    "text": "CSS + HTML\n&lt;body&gt;\n    &lt;table id=\"content\"&gt;\n&lt;tr class='name'&gt;\n&lt;td class='firstname'&gt;\nKurtis\n&lt;/td&gt;\n&lt;td class='lastname'&gt;\nMcCoy\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr class='name'&gt;\n&lt;td class='firstname'&gt;\nLeah\n&lt;/td&gt;\n&lt;td class='lastname'&gt;\nGuerrero\n&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n\nWe can use CSS selectors (see example)\nSelectorGadget as Chrome Extension\nInspect option in Chrome"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#lets-inspect-a-website",
    "href": "2025/weeks/week07/slides7.html#lets-inspect-a-website",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Let’s inspect a website",
    "text": "Let’s inspect a website\n\nUse inspect option to select table to copy Xpath –example: //*[@id=\"mw-content-text\"]/div[1]/table[1]"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#overview-of-rvest",
    "href": "2025/weeks/week07/slides7.html#overview-of-rvest",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Overview of rvest",
    "text": "Overview of rvest\nThe package rvest allows us to:\n\nCollect the HTML source code of a webpage\nRead the HTML of the page\nSelect and keep certain elements of the page that are of interest\nRelatively simple: no dynamic webpages\n\nMain uses: Tables, texts, extracting links (downloading files)"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#parsing-html-code",
    "href": "2025/weeks/week07/slides7.html#parsing-html-code",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Parsing HTML code",
    "text": "Parsing HTML code\nFirst step in webscraping: read HTML code in R and parse it (understanding structure)\n\nxml2 package\nread_html: parse HTML code into R (and )\nrvest package\nhtml_text: extract text from HTML code\nhtml_table: extract tables in HTML code\nhtml_nodes: extract components with CSS selector\nhtml_attrs: extract attributes of nodes"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#setup",
    "href": "2025/weeks/week07/slides7.html#setup",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Setup",
    "text": "Setup\npacman::p_load(tidyverse, # tidyverse pkgs including purrr\n               purrr, # automating \n               xml2L, # parsing XML\n               rvest, # parsing HTML\n               robotstxt) #checking path is permitted"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#parsing-the-url-of-the-website",
    "href": "2025/weeks/week07/slides7.html#parsing-the-url-of-the-website",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Parsing the url of the website",
    "text": "Parsing the url of the website\nlibrary(rvest)\nlibrary(xml2)\nurl &lt;- \"https://en.wikipedia.org/wiki/University_College_London\"\nparsed &lt;- read_html(url)\nThis returns an xml object that contains all the information of the website"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#extracting-selected-information",
    "href": "2025/weeks/week07/slides7.html#extracting-selected-information",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Extracting selected information",
    "text": "Extracting selected information\n\nSelect the desired part\n\nparsed.sub &lt;- html_element(parsed, xpath = '//*[@id=\"mw-content-text\"]/div[1]/table[1]')\n\nConvert to table\n\ntable.df &lt;- html_table(parsed.sub)   \nhead(table.df)"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#tidying-data-is-part-of-webscraping",
    "href": "2025/weeks/week07/slides7.html#tidying-data-is-part-of-webscraping",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Tidying data is part of webscraping",
    "text": "Tidying data is part of webscraping\nlibrary(janitor)\n# clean names\nnames(table.df) &lt;-  janitor::make_clean_names(names(table.df))\n\n# Delete empty rows\nempt &lt;- apply(table.df, 1, FUN = function(x) all(is.na(x) | x == \"\"))\ntable.df &lt;- table.df[which(!empt), ]\n\n# Exclude empty columns \ntable.df &lt;- table.df[,-3:-7]\n\nhead(table.df)"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#automating-the-process",
    "href": "2025/weeks/week07/slides7.html#automating-the-process",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Automating the process",
    "text": "Automating the process\nThe task is to scrap Wiki info-cards of three universities (UCL; Oxford; Cambridge)\n#see whether path is allowed to be scraped \npaths_allowed(paths=\"https://en.wikipedia.org/wiki/University_College_London\")\n\n#creating url list for the websites to be scraped \nurl_list &lt;- c(\n  \"https://en.wikipedia.org/wiki/University_College_London\",\n  \"https://en.wikipedia.org/wiki/University_of_Cambridge\",\n  \"https://en.wikipedia.org/wiki/University_of_Oxford\"\n)"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#inspection",
    "href": "2025/weeks/week07/slides7.html#inspection",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Inspection",
    "text": "Inspection\nurl &lt;- \"https://en.wikipedia.org/wiki/University_College_London\"\n\ndownload.file(url, destfile = \"scraped_page.html\", quiet = TRUE)\n\ntarget &lt;- read_html(\"scraped_page.html\")\n\n# If you want character vector output\ntarget1 &lt;- target %&gt;%\n  html_nodes(xpath = '//*[@id=\"mw-content-text\"]/div[1]/table[1]') %&gt;%\n  html_text() \n\n# If you want table output \ntarget2 &lt;- target %&gt;%\n  html_nodes(xpath = '//*[@id=\"mw-content-text\"]/div[1]/table[1]') %&gt;%\n  html_table()"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#writing-a-function",
    "href": "2025/weeks/week07/slides7.html#writing-a-function",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Writing a function",
    "text": "Writing a function\nget_table_from_wiki &lt;- function(url){\n  \n  download.file(url, destfile = \"scraped_page.html\", quiet = TRUE)\n  \n  target &lt;- read_html(\"scraped_page.html\")\n  \n  table &lt;- target %&gt;%\n    html_nodes(xpath = '//*[@id=\"mw-content-text\"]/div[1]/table[1]') %&gt;%\n    html_table() \n  \n  return(table)\n}"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#automating-data-collection",
    "href": "2025/weeks/week07/slides7.html#automating-data-collection",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Automating data collection",
    "text": "Automating data collection\n#Testing\nget_table_from_wiki(url_list[[2]])\n\n#Automation\nlibrary(purrr)\nmap(url_list, get_table_from_wiki)"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#scraping-tables",
    "href": "2025/weeks/week07/slides7.html#scraping-tables",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Scraping tables",
    "text": "Scraping tables\ntestlink &lt;- read_html(\"https://en.wikipedia.org/wiki/University_College_London\")\ntable &lt;- testlink %&gt;%\n  html_nodes(xpath='//*[@id=\"mw-content-text\"]/div[1]/table[2]') %&gt;%\n  html_table()\n\ntable &lt;- data.frame(table)\ntable"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#practical-limitations-to-scraping",
    "href": "2025/weeks/week07/slides7.html#practical-limitations-to-scraping",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Practical limitations to scraping",
    "text": "Practical limitations to scraping\n\nWeb-pages are complex with many different elements\nDealing with the great amount of unstructured data\nAPIs provided at least two advantages over scraping:\nThe first is that they made it easier to get at the data. Rather than effectively ‘unbaking’ the HTML-formatted data and user interface, the API allowed for an ordered and predictable transmission of information\nThe second is that the API often provided information that was not visible to the public through the web"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#further-materials",
    "href": "2025/weeks/week07/slides7.html#further-materials",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Further materials",
    "text": "Further materials\nFurther texts:\n\nAutomated data collection with R\n\nTutorials:\n\nrvest"
  },
  {
    "objectID": "2025/weeks/week07/slides7.html#lab-exercise-scraping-global-indicies-table-on-yahoo-finance",
    "href": "2025/weeks/week07/slides7.html#lab-exercise-scraping-global-indicies-table-on-yahoo-finance",
    "title": "🗓️ Week 07Automated Data Collection I",
    "section": "Lab exercise: Scraping global indicies table on Yahoo finance",
    "text": "Lab exercise: Scraping global indicies table on Yahoo finance\n\n\n\nLoad required libraries\nCheck whether scraping is permitted on Yahoo Finance (https://finance.yahoo.com/world-indices/)\nIdentify XPath for the table, read the path (read_html)\nKeep only the columns: (Name, Last Price, % Change)\nSave this information as a new data frame (yahoo_data)\nUse plotly to create a bar plot to visualise stock indicies prices and changes\n\n\n\n\n\n\n\n\nSOCS0100 – Computational Social Science"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#intro-to-shiny",
    "href": "2025/weeks/week06/slides6.html#intro-to-shiny",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Intro to Shiny",
    "text": "Intro to Shiny\n\nShiny is a “framework for creating web applications using R code”\nYou can create a dashboard or an interactive map without knowing anything about HTML, CSS, or JavaScript\nYou’ll learn the two key components of every Shiny app: the UI (user interface) which defines how your app looks, and the server function which defines how your app works\nShiny uses reactive programming to automatically update outputs when inputs change so we’ll finish off the chapter by learning the third important component of Shiny apps: reactive expressions"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#setup",
    "href": "2025/weeks/week06/slides6.html#setup",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Setup",
    "text": "Setup\n\nYou first need to install install.packages(\"shiny\")\nThen load in your current R session library(shiny)"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#creating-app-directory-and-app.r-file",
    "href": "2025/weeks/week06/slides6.html#creating-app-directory-and-app.r-file",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Creating app directory and app.R file",
    "text": "Creating app directory and app.R file\n\nCreate a new directory for your app, and put a single file called app.R in it\nThis app.R file will be used to tell Shiny both how your app should look, and how it should behave\nIf you’re creating a complex app, you can achieve the same goal with two files: ui.R and server.R."
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#app.r-file",
    "href": "2025/weeks/week06/slides6.html#app.r-file",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "app.R file",
    "text": "app.R file\nlibrary(shiny)\nui &lt;- fluidPage(\n  \"This is my first Shiny app!\"\n)\nserver &lt;- function(input, output, session) {\n}\nshinyApp(ui, server)"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#shiny-basics",
    "href": "2025/weeks/week06/slides6.html#shiny-basics",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Shiny basics",
    "text": "Shiny basics\n\nCreate a new directory and an app.R file containing a basic app in one step by clicking File | New Project, then selecting New Directory and Shiny Web Application\nIt is very important that the name of the file is app.R and out in its own folder, otherwise it would not be recognised as a Shiny app"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#deployment",
    "href": "2025/weeks/week06/slides6.html#deployment",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Deployment",
    "text": "Deployment\nThere are a few ways you can run this app:\n\nClick the Run App button in the document toolbar\nUse a keyboard shortcut: Cmd/Ctrl + Shift + Enter\nDeploy to the shinyapps.io cloud\n\ninstall.packages(\"rsconnect\")\nlibrary(rsconnect)\n\nrsconnect::setAccountInfo(name = \"&lt;Account name&gt;\", \n                          token = \"&lt;Token&gt;\",\n                          secret = \"&lt;Secret&gt;\")\n\nrsconnect::deployApp(appNames = \"&lt;App name&gt;\")"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#cancelling-the-app",
    "href": "2025/weeks/week06/slides6.html#cancelling-the-app",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Cancelling the app",
    "text": "Cancelling the app\n\nClick the stop button to stop the app, or press the Escape key."
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#setup-and-loading-the-dataset",
    "href": "2025/weeks/week06/slides6.html#setup-and-loading-the-dataset",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Setup and loading the dataset",
    "text": "Setup and loading the dataset\n\nLet’s use the processed EMDAT dataset in which we keep country, year, deaths, injuries, and homelessness variables to build an interactive data visualisation (e.g. plotting trends)\n\n#package uploading \nif (!require(shiny)) install.packages(\"shiny\")\nif (!require(ggplot2)) install.packages(\"ggplot2\")\nif (!require(dplyr)) install.packages(\"dplyr\")\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Read data from CSV\ndata &lt;- read.csv(\"emdat_app.csv\")"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#add-plain-text-to-the-ui",
    "href": "2025/weeks/week06/slides6.html#add-plain-text-to-the-ui",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Add plain text to the UI",
    "text": "Add plain text to the UI\n\nYou can place R strings inside fluidPage() to render text\n\nfluidPage(\"Disaster Statistics\", \"Trends\")\n\nReplace the line in your app that assigns an empty fluidPage() into ui with the one above, and run the app\nThe entire UI will be built by passing comma-separated arguments into the fluidPage() function. By passing regular text, the webpage will just render boring unformatted text"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#add-formatted-text-and-other-html-elements",
    "href": "2025/weeks/week06/slides6.html#add-formatted-text-and-other-html-elements",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Add formatted text and other HTML elements",
    "text": "Add formatted text and other HTML elements\n\nIf you want your text to be formatted nicer, Shiny has many functions that are wrappers around HTML tags that format text\n\nh1() function for a top-level header\nh2() for a secondary header\nstrong() to make text bold\nem() to make text italicised\nand many others\n\n\nfluidPage(\n  h1(\"Disasters\"),\n  \"Statistics\",\n  \"Trends\",\n  br(),\n  \"Emdat\",\n  strong(\"data\")\n)"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#adding-a-title",
    "href": "2025/weeks/week06/slides6.html#adding-a-title",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Adding a title",
    "text": "Adding a title\n\nYou could add a title to the app with either h1() or Shiny also has a special function titlePanel()\nUsing titlePanel() adds a visible big title-like text to the top of the page\n\nfluidPage(\n  titlePanel(\"Disaster Statistics Trends\")\n)"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#adding-a-layout",
    "href": "2025/weeks/week06/slides6.html#adding-a-layout",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Adding a layout",
    "text": "Adding a layout\n\nsidebarLayout() to add a simple structure. It provides a simple two-column layout with a smaller sidebar and a larger main panel\nYou can add the following code after the titlePanel()\n\nsidebarLayout(\n  sidebarPanel(\"our inputs will go here\"),\n  mainPanel(\"the results will go here\")\n)\n\nRemember that all the arguments inside fluidPage() need to be separated by commas"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#adding-inputs-to-the-ui",
    "href": "2025/weeks/week06/slides6.html#adding-inputs-to-the-ui",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Adding inputs to the UI",
    "text": "Adding inputs to the UI\n\nInputs are what gives users a way to interact with a Shiny app. Shiny provides many input functions to support many kinds of interactions that the user could have with an app\ntextInput() is used to let the user enter text, numericInput() lets the user select a number, dateInput() is for selecting a date, and selectInput() is for creating a select box (i.e. dropdown menu)\nAll input functions have the same first two arguments: inputId and label. The inputId will be the name that Shiny will use to refer to this input when you want to retrieve its current value\nThe label argument specifies the text in the display label that goes along with the input widget"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#shiny-inputs",
    "href": "2025/weeks/week06/slides6.html#shiny-inputs",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Shiny inputs",
    "text": "Shiny inputs"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#input-for-country",
    "href": "2025/weeks/week06/slides6.html#input-for-country",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Input for country",
    "text": "Input for country\n\nThe first input we can have is to select a country in this data\nThe most appropriate input type in this case is probably the select box. Look at the documentation for selectInput() and create an input function\n\nselectInput(\n    inputId = \"country\",\n    label = \"Select country\",\n    choices = unique(data$country),\n    selected = \"Belgium\"\n  )"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#input-for-variables-to-analyse",
    "href": "2025/weeks/week06/slides6.html#input-for-variables-to-analyse",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Input for variables to analyse",
    "text": "Input for variables to analyse\n\nLike the country variable, for this one we should also have a dropdown menu to choose the variables\n\nselectInput(\n        inputId = \"variable\",\n        label = \"Select variable\",\n        choices = c(\"Deaths\", \"Injuries\", \"Homelessness\"),\n        selected = \"Deaths\"\n      )\n\nAdd these input codes inside sidebarPanel(), after the previous input (separate them with a comma)"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#input-for-years-to-show-trends-over-certain-period-of-time",
    "href": "2025/weeks/week06/slides6.html#input-for-years-to-show-trends-over-certain-period-of-time",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Input for years to show trends over certain period of time",
    "text": "Input for years to show trends over certain period of time\n\nThe most sensible type of input for this is sliderInput()\nLooking at the documentation for sliderInput(), you’ll see that by supplying a vector of length two as the value argument, it can be used to specify a range rather than a single number\n\nsliderInput(\n        inputId = \"year_range\",\n        label = \"Select year range\",\n        min = min(data$Year),\n        max = max(data$Year),\n        value = c(min(data$Year), max(data$Year)),\n        step = 1,\n        sep = \"\"\n      )"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#add-placeholders-for-outputs",
    "href": "2025/weeks/week06/slides6.html#add-placeholders-for-outputs",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Add placeholders for outputs",
    "text": "Add placeholders for outputs\n\nAfter creating all the inputs, we should add elements to the UI to display the outputs. Outputs can be any object that R creates and that we want to display in our app - such as a plot, a table, or text\nShiny provides several output functions, one for each type of output. Similarly to the input functions, all the output functions have a outputId argument that is used to identify each output, and this argument must be unique for each output"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#output-for-a-plot",
    "href": "2025/weeks/week06/slides6.html#output-for-a-plot",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Output for a plot",
    "text": "Output for a plot\n\nSince we want a plot to show trends of disaster statistics, the function we can use is plotOutput()\nYou can add the following code into the mainPanel()\n\n mainPanel(\n      plotOutput(\"plot\")\n    )"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#output-for-a-table",
    "href": "2025/weeks/week06/slides6.html#output-for-a-table",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Output for a table",
    "text": "Output for a table\n\nSince we want a plot to show trends of disaster statistics, the function we can use is tableOutput()\nYou can add the following code into the mainPanel()\n\n mainPanel(\n      tableOutput(\"results\")\n    )"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#implement-server-logic-to-create-outputs",
    "href": "2025/weeks/week06/slides6.html#implement-server-logic-to-create-outputs",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Implement server logic to create outputs",
    "text": "Implement server logic to create outputs\n\nIf you look at the server function, you’ll notice that it is always defined with two arguments: input and output\nYou must define these two arguments! Both input and output are list-like objects. As the names suggest, input is a list you will read values from and output is a list you will write values to\ninput will contain the values of all the different inputs at any given time, and output is where you will save output objects (such as tables and plots) to display in your app"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#building-an-output",
    "href": "2025/weeks/week06/slides6.html#building-an-output",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Building an output",
    "text": "Building an output\n\nSave the output object into the output list (remember the app template - every server function has an output argument)\nBuild the object with a render* function, where * is the type of output\nAccess input values using the input list (every server function has an input argument)"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#making-an-output-react-to-an-input-and-building-the-plot-output",
    "href": "2025/weeks/week06/slides6.html#making-an-output-react-to-an-input-and-building-the-plot-output",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Making an output react to an input and building the plot output",
    "text": "Making an output react to an input and building the plot output\n\n\n\nLet’s learn how to make an output depended on an input\nThe variable input contains a list of all the inputs that are defined in the UI\ninput$year_range return a vector of length two containing the minimum and maximum year. Whenever the user manipulates the slider in the app, these values are updated, and whatever code relies on it gets re-evaluated. This is a concept known as reactivity\n\n\nserver &lt;- function(input, output, session) {\n  \n  output$plot &lt;- renderPlot({\n    variable &lt;- switch(input$variable,\n                       \"Deaths\" = \"deaths\",\n                       \"Injuries\" = \"injuries\",\n                       \"Homelessness\" = \"homelessness\")\n    \n    data %&gt;%\n      filter(country == input$country, \n             Year &gt;= input$year_range[1], \n             Year &lt;= input$year_range[2]) %&gt;%\n      ggplot(aes(Year, .data[[variable]])) +\n      geom_line() +\n      labs(y = input$variable)\n  })\n  \n}"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#making-an-output-react-to-an-input-and-building-the-plot-output-1",
    "href": "2025/weeks/week06/slides6.html#making-an-output-react-to-an-input-and-building-the-plot-output-1",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Making an output react to an input and building the plot output",
    "text": "Making an output react to an input and building the plot output\n\n\n\nRecall that we have 3 inputs: country, variable, and year. We can filter the data based on the values of these three inputs. We can use dplyr functions to filter the data\n\n\nserver &lt;- function(input, output, session) {\n\noutput$plot &lt;- renderPlot({  variable &lt;- switch(input$variable, \"Deaths\"\n= \"deaths\", \"Injuries\" = \"injuries\", \"Homelessness\" = \"homelessness\")\n\ndata %&gt;%\n  filter(country == input$country, \n         Year &gt;= input$year_range[1], \n         Year &lt;= input$year_range[2]) %&gt;%\n  ggplot(aes(Year, .data[[variable]])) +\n  geom_line() +\n  labs(y = input$variable)\n\n})\n\n}"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#finalising-your-shiny-app",
    "href": "2025/weeks/week06/slides6.html#finalising-your-shiny-app",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Finalising your Shiny app",
    "text": "Finalising your Shiny app\nif (!require(shiny)) install.packages(\"shiny\")\nif (!require(ggplot2)) install.packages(\"ggplot2\")\nif (!require(dplyr)) install.packages(\"dplyr\")\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Read data from CSV\ndata &lt;- read.csv(\"emdat_app.csv\")\n\nui &lt;- fluidPage(\n  \n  # Header\n  h1(\"Disaster statistics trends\"),\n  \n  # Sidebar layout\n  sidebarLayout(\n    \n    # Sidebar panel\n    sidebarPanel(\n      selectInput(\n        inputId = \"country\",\n        label = \"Select country\",\n        choices = unique(data$country),\n        selected = \"Belgium\"\n      ),\n      \n      selectInput(\n        inputId = \"variable\",\n        label = \"Select variable\",\n        choices = c(\"Deaths\", \"Injuries\", \"Homelessness\"),\n        selected = \"Deaths\"\n      ),\n      \n      sliderInput(\n        inputId = \"year_range\",\n        label = \"Select year range\",\n        min = min(data$Year),\n        max = max(data$Year),\n        value = c(min(data$Year), max(data$Year)),\n        step = 1,\n        sep = \"\"\n      )\n    ),\n    \n    # Main panel\n    mainPanel(\n      plotOutput(\"plot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  output$plot &lt;- renderPlot({\n    variable &lt;- switch(input$variable,\n                       \"Deaths\" = \"deaths\",\n                       \"Injuries\" = \"injuries\",\n                       \"Homelessness\" = \"homelessness\")\n    \n    data %&gt;%\n      filter(country == input$country, \n             Year &gt;= input$year_range[1], \n             Year &lt;= input$year_range[2]) %&gt;%\n      ggplot(aes(Year, .data[[variable]])) +\n      geom_line() +\n      labs(y = input$variable)\n  })\n  \n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#further-materials",
    "href": "2025/weeks/week06/slides6.html#further-materials",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Further materials",
    "text": "Further materials\nFurther texts:\n\nMastering Shiny\n\nTutorials:\n\nShiny basics"
  },
  {
    "objectID": "2025/weeks/week06/slides6.html#lab-exercise-building-a-disaster-statistics-shiny-app",
    "href": "2025/weeks/week06/slides6.html#lab-exercise-building-a-disaster-statistics-shiny-app",
    "title": "🗓️ Week 06From Reproducibility to Interactivity",
    "section": "Lab exercise: Building a Disaster Statistics Shiny App",
    "text": "Lab exercise: Building a Disaster Statistics Shiny App\n\n\n\nProblem 1: Setup\n\nInitialise a Shiny app and load required libraries\nRead “emdat_app.csv” into data\n\nProblem 2: UI Design\n\nAdd a title, country selector, variable selector, and year range slider.\n\nProblem 3: Initial Plot\n\nDisplay a placeholder plot\nFilter data based on user inputs and create a line plot\n\n\n\n\nProblem 4: Plot Customisation\n\nLabel axes dynamically based on the selected variable\nImplement UI option for different plot types\n\nProblem 5: Dynamic Updates\n\nUse reactive expressions to update variable choices based on the selected country\nMake the plot dynamically update with user inputs\n\nProblem 6: Testing and Debugging\n\nTest the app with various inputs\n\n\n\n\n\n\n\nSOCS0100 – Computational Social Science"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#intro-to-quarto",
    "href": "2025/weeks/week05/slides5.html#intro-to-quarto",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Intro to Quarto",
    "text": "Intro to Quarto\n\nQuarto provides a unified authoring framework for data science, combining your code, its results, and your prose\nQuarto documents are fully reproducible and support dozens of output formats, like PDFs, Word files, presentations, and more\nQuarto is a command line interface tool, not an R package\nIf you have any question how to use Quarto in the future, you should refer to the Quarto documentation."
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#setup",
    "href": "2025/weeks/week05/slides5.html#setup",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Setup",
    "text": "Setup\n\nYou need the Quarto command line interface (Quarto CLI), but you don’t need to explicitly install it or load it, as RStudio automatically does both when needed"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#quarto-cli",
    "href": "2025/weeks/week05/slides5.html#quarto-cli",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Quarto CLI",
    "text": "Quarto CLI"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#quarto-visual-editor",
    "href": "2025/weeks/week05/slides5.html#quarto-visual-editor",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Quarto visual editor",
    "text": "Quarto visual editor"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#quarto-basics",
    "href": "2025/weeks/week05/slides5.html#quarto-basics",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Quarto basics",
    "text": "Quarto basics\n\nYou’ll see a Quarto file next slide – a plain text file that has the extension .qmd:\nIt contains three important types of content:\n\nAn (optional) YAML header surrounded by —s\nChunks of R code surrounded by ```\nText mixed with simple text formatting like # heading and italics"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#qmd-example",
    "href": "2025/weeks/week05/slides5.html#qmd-example",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": ".qmd example",
    "text": ".qmd example\n---\ntitle: \"Diamond sizes\"\ndate: 2023-03-10\nformat: html\n---\n#| label: setup\n#| include: false\n\nlibrary(tidyverse)\n\nsmaller &lt;- diamonds |&gt; \n  filter(carat &lt;= 2.5)\n\nsmaller |&gt; \n  ggplot(aes(x = carat)) + \n  geom_freqpoly(binwidth = 0.01)"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#qmd-with-notebook-interface",
    "href": "2025/weeks/week05/slides5.html#qmd-with-notebook-interface",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": ".qmd with notebook interface",
    "text": ".qmd with notebook interface\n\nTo produce a complete report containing all text, code, and results, click “Render” or press Cmd/Ctrl + Shift + K. You can also do this programmatically with quarto::quarto_render(\"docname.qmd\") --to html/pdf"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#diagram-of-quarto-workflow",
    "href": "2025/weeks/week05/slides5.html#diagram-of-quarto-workflow",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Diagram of Quarto workflow",
    "text": "Diagram of Quarto workflow\n\nWhen you render the document, Quarto sends the .qmd file to knitr, https://yihui.org/knitr/, which executes all of the code chunks and creates a new markdown (.md) document which includes the code and its output\nThe markdown file generated by knitr is then processed by pandoc, https://pandoc.org, which is responsible for creating the finished file"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#pandoc-fenced-divs",
    "href": "2025/weeks/week05/slides5.html#pandoc-fenced-divs",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Pandoc fenced divs",
    "text": "Pandoc fenced divs\nStructure:\n\nStart and end with equal number of : - minimum of 3 :::\nAdd curly brackets to indicate the start/end of class {.class} or {sometimes-class}\n\n::: {.class}\nAll this content can be modified\n:::\n::: {layout-ncol=2}\n\n![](image.png){fig-alt=\"Description of image 1\"}\n\n![](image2.png){fig-alt=\"Description of image 1\"}\n:::"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#tabsets",
    "href": "2025/weeks/week05/slides5.html#tabsets",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Tabsets",
    "text": "Tabsets\n\nYou can pplit up and flip between sections of a page, rather than having two columns for instance\n\n::: {.panel-tabset}\n\n## Element 1\n...content...\n\n## Element 2\n...content...\n:::"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#tabsets-example",
    "href": "2025/weeks/week05/slides5.html#tabsets-example",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Tabsets example",
    "text": "Tabsets example\n\nCodeOutput\n\n\n\n```{r}\n#| eval: false\nhead(mtcars)\n```\n\n\n\n\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#footnotes",
    "href": "2025/weeks/week05/slides5.html#footnotes",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Footnotes",
    "text": "Footnotes\n\nYou can create inline footnotes like so: some inline text with a^[footnote]\nIf you hover your mouse over the citation and footnote in this sentence you’ll see a popup displaying the reference contents:\n\nformat:\n  html:\n    citations-hover: true\n    footnotes-hover: true\nFor example, did you know that Howard is a dog^[he is a Boston Terrier]?"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#coming-back-to-source-editor",
    "href": "2025/weeks/week05/slides5.html#coming-back-to-source-editor",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Coming back to source editor",
    "text": "Coming back to source editor\n## Text formatting\n\n*italic* **bold** ~~strikeout~~ `code`\n\nsuperscript^2^ subscript~2~\n\n[underline]{.underline} [small caps]{.smallcaps}\n\n## Headings\n\n# 1st Level Header\n\n## 2nd Level Header\n\n### 3rd Level Header\n\n## Lists\n\n-   Bulleted list item 1\n\n-   Item 2\n\n    -   Item 2a\n\n    -   Item 2b\n\n1.  Numbered list item 1\n\n2.  Item 2.\n    The numbers are incremented automatically in the output.\n\n## Links and images\n\n&lt;http://example.com&gt;\n\n[linked phrase](http://example.com)\n\n![optional caption text](quarto.png){fig-alt=\"Quarto logo and the word quarto spelled in small case letters\"}\n\n## Tables\n\n| First Header | Second Header |\n|--------------|---------------|\n| Content Cell | Content Cell  |\n| Content Cell | Content Cell  |"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#embedding-code-chunks",
    "href": "2025/weeks/week05/slides5.html#embedding-code-chunks",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Embedding code chunks",
    "text": "Embedding code chunks\nTo run code inside a Quarto document, you need to insert a chunk. There are three ways to do so:\n\nThe keyboard shortcut Cmd + Option + I / Ctrl + Alt + I.\nThe “Insert” button icon in the editor toolbar.\nBy manually typing the chunk delimiters {r} and."
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#managing-code-chunks",
    "href": "2025/weeks/week05/slides5.html#managing-code-chunks",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Managing code chunks",
    "text": "Managing code chunks\nLabeling them:\n#| label: simple-addition\n\n1 + 1\nCustomising chunk output:\n\neval: false prevents code from being evaluated. (And obviously if the code is not run, no results will be generated). This is useful for displaying example code, or for disabling a large block of code without commenting each line\ninclude: false runs the code, but doesn’t show the code or results in the final document. Use this for setup code that you don’t want cluttering your report\necho: false prevents code, but not the results from appearing in the finished file. Use this when writing reports aimed at people who don’t want to see the underlying R code.\nmessage: false or warning: false prevents messages or warnings from appearing in the finished file."
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#global-options",
    "href": "2025/weeks/week05/slides5.html#global-options",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Global options",
    "text": "Global options\n\nYou can do this by adding the preferred options in the document YAML, under execute. For example, if you are preparing a report for an audience who does not need to see your code but only your results and narrative, you might set echo: false at the document level\n\nHide code:\n---\ntitle: \"My report\"\nexecute:\n  echo: false\n---\nFold code:\n---\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Hidden code\"\n---"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#aesthetics-html-appearence",
    "href": "2025/weeks/week05/slides5.html#aesthetics-html-appearence",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Aesthetics (HTML appearence)",
    "text": "Aesthetics (HTML appearence)\n\nQuarto comes pre-installed with 25 themes from Bootswatch and you can use them like so:\n\n---\nformat:\n  html:\n    theme: litera\n---\n\nOr you can customise a theme with CSS/SCSS/SASS\n\n---\nformat:\n  html:\n    theme: \n      - litera\n      - custom.scss\n---\nPdf articles:\n---\nformat:\n  pdf:\n    template: mytemplate.tex\n---"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#figures",
    "href": "2025/weeks/week05/slides5.html#figures",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Figures",
    "text": "Figures\n\nTo embed an image from an external file, you can use the Insert menu in the Visual Editor in RStudio and select Figure / Image\nIf you include a code chunk that generates a figure (e.g., includes a ggplot() call), the resulting figure will be automatically included in your Quarto document"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#figure-sizing",
    "href": "2025/weeks/week05/slides5.html#figure-sizing",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Figure sizing",
    "text": "Figure sizing\n\nThere are five main options that control figure sizing: fig-width, fig-height, fig-asp, out-width and out-height\n\nRecommended options:\n\nPlots tend to be more aesthetically pleasing if they have consistent width. To enforce this, set fig-width: 6 (6”) and fig-asp: 0.618 (the golden ratio) in the defaults. Then in individual chunks, only adjust fig-asp\nControl the output size with out-width and set it to a percentage of the body width of the output document. We suggest to out-width: “70%” and fig-align: center\nTo put multiple plots in a single row, set the layout-ncol to 2 for two plots, 3 for three plots, etc. This effectively sets out-width to “50%” for each of your plots if layout-ncol is 2, “33%” if layout-ncol is 3, etc."
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#tables",
    "href": "2025/weeks/week05/slides5.html#tables",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Tables",
    "text": "Tables\n\nYou can include two types of tables in a Quarto document: directly in your Quarto document (using the Insert Table menu) or they can be tables generated as a result of a code chunk\n\n\nmtcars[1:5, ]\n\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n\n\n\nIf you prefer that data be displayed with additional formatting you can use the knitr::kable() function"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#bibliographies-and-citations",
    "href": "2025/weeks/week05/slides5.html#bibliographies-and-citations",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Bibliographies and Citations",
    "text": "Bibliographies and Citations\n\nTo add a citation using the visual editor, go to Insert &gt; Citation. Citations can be inserted from a variety of sources:\n\nI suggest particularly two ways:\n\nDOI (Document Object Identifier) references\nYour document bibliography (a .bib file in the directory of your document)\n\n\nIf you add a citation using the first method, the visual editor will automatically create a bibliography.bib file for you and add the reference to it\nIt will also add a bibliography field to the document YAML. As you add more references, this file will get populated with their citations"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#presentations-with-format-revealjs",
    "href": "2025/weeks/week05/slides5.html#presentations-with-format-revealjs",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Presentations with format: revealjs",
    "text": "Presentations with format: revealjs\nQuarto comes with 10 built-in themes:\nbeige, blood, dark, default, league, moon, night, serif, simple, sky, solarized\n---\ntitle: \"Presentation\"\nformat:\n  revealjs: \n    theme: [simple, custom.scss]\n---"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#absolute-positioning",
    "href": "2025/weeks/week05/slides5.html#absolute-positioning",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Absolute positioning",
    "text": "Absolute positioning\nAbsolute position allows for tight control of placement\n::: {.absolute bottom=25 left=100 .fragment}\n\n![](images/howard-gentleman.jpeg){width=150 fig-alt=\"Howard dressed as a victorian gentleman\"}\n\n:::"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#output-location-column-fragment",
    "href": "2025/weeks/week05/slides5.html#output-location-column-fragment",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "output-location: column-fragment",
    "text": "output-location: column-fragment\n#| output-location: column-fragment\n\n\nlibrary(ggplot2)\n\nggplot(mtcars, aes(x = mpg, y = disp)) +\n  geom_point()"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#footerlogo",
    "href": "2025/weeks/week05/slides5.html#footerlogo",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Footer/Logo",
    "text": "Footer/Logo\n---\nformat:\n  revealjs:\n    logo: \"pic1.png\"\n    footer: \"Footer text\"\n---\n---\nformat:\n  revealjs:\n    logo: \"https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-Flat.png\"\n    footer: \"[Reports and Presentations with Quarto](https://xxxxx.com/)\"\n---"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#slide-background",
    "href": "2025/weeks/week05/slides5.html#slide-background",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Slide background",
    "text": "Slide background\n## Slide Background {background-color=\"black\" background-image=\"images/howard-gentleman.jpeg\" background-size=\"100px\" background-repeat=\"repeat\"}\n\nSlide background\n\n\nAttribute\nDeafult\nDescription\n\n\n\n\n`background-image`\n\nURL of the image to show. GIFs restart when the slide opens\n\n\n`background-size`\ncover\nSee background-size on MDN\n\n\n`background-position`\ncenter\nSee background-position on MDN\n\n\nbackground-repeat\nno-repeat\nSee background-repeat on MDN\n\n\nbackground-opacity\n1\nOpacity of the background image on a 0-1 scale. 0 is transparent and 1 is fully opaque"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#further-materials",
    "href": "2025/weeks/week05/slides5.html#further-materials",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Further materials",
    "text": "Further materials\nReports:\n\nQuarto docs: Documents\n\nPresentations:\n\nQuarto docs: Presentations"
  },
  {
    "objectID": "2025/weeks/week05/slides5.html#lab-exercise",
    "href": "2025/weeks/week05/slides5.html#lab-exercise",
    "title": "🗓️ Week 05Improving Workflow for Reproducible Social Science",
    "section": "Lab exercise",
    "text": "Lab exercise\n\nCreate a new Quarto document using File &gt; New File &gt; Quarto Document. Read the instructions. Practice running the chunks individually\nPractice what you’ve learned in the lecture by creating a very short report. The title should be your name, and you should include headings for each step in your report\nUsing any R in-built dataset, you will come up with one data wrangling task (e.g. filtering and summarising) to run its code inside your Quarto document (e.g. code chunk). Make sure that your report should include both code and output\nUsing the same R in-built dataset, you will come up with one data visualisation (e.g. ggplot) to run its code inside your Quarto document (e.g. code chunk). Make sure that your report should include both code and output\nFinally, render your Quarto report in both HTML and PDF format\n\n\n\n\nSOCS0100 – Computational Social Science"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#programming-in-r",
    "href": "2025/weeks/week04/slides4.html#programming-in-r",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Programming in R",
    "text": "Programming in R\n\nRepeating yourself in code is dangerous because it can easily lead to errors and inconsistencies\nWhile the syntax might vary, the basic idea of flow, functions, and iteration are common across all programming languages (e.g. Python)"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#setup",
    "href": "2025/weeks/week04/slides4.html#setup",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Setup",
    "text": "Setup\n\n# Install packages\nif (!require(\"pacman\")) {\n  install.packages(\"pacman\")\n}\n\npacman::p_load(\n  tidyverse, # tidyverse pkgs including purrr\n  glue, #combining strings and objects\n  gapminder, # dataset\n  ggplot2, #plotting\n  gridExtra #arranging plots\n  ) \n\n\nThe downloaded binary packages are in\n    /var/folders/3b/f__hzkkn7h187ymsbptz__mw0000gn/T//RtmpdblMGK/downloaded_packages\n\n\n\nThe downloaded binary packages are in\n    /var/folders/3b/f__hzkkn7h187ymsbptz__mw0000gn/T//RtmpdblMGK/downloaded_packages"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#flow-control",
    "href": "2025/weeks/week04/slides4.html#flow-control",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Flow control",
    "text": "Flow control\n\nSometimes you only want to execute code if a certain condition is met (if-else statement)\n\nif (condition) {\n  # Code executed when condition is TRUE\n} else {\n  # Code executed when condition is FALSE\n}\n\nCondition is a statement that must always evaluate to either TRUE or FALSE (i.e. a vector of length 1)"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#flow-control-examples",
    "href": "2025/weeks/week04/slides4.html#flow-control-examples",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Flow control (examples)",
    "text": "Flow control (examples)\n\naverage = 72\nif (average &gt; 69) {\n    print(\"First-class honours\")\n} else {\n    print(\"Second-class honours\")\n}\n\n[1] \"First-class honours\"\n\n\n\naverage = 69\nif (average &gt; 69) {\n    print(\"First-class honours\")\n} else {\n    print(\"Second-class honours\")\n}\n\n[1] \"Second-class honours\""
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#what-would-you-do-with-multiple-conditions",
    "href": "2025/weeks/week04/slides4.html#what-would-you-do-with-multiple-conditions",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "What would you do with multiple conditions?",
    "text": "What would you do with multiple conditions?\nif (this) {\n  # Do that\n} else if (that) {\n  # Do something else\n} else {\n  # Do something completely different\n}"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#going-back-to-earlier-one-condition-example",
    "href": "2025/weeks/week04/slides4.html#going-back-to-earlier-one-condition-example",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Going back to earlier one-condition example",
    "text": "Going back to earlier one-condition example\n\nYou can generate more complex conditional statements with Boolean operators like & and |:\n\n\naverage = 50 \n\nif (average &gt; 69) {\n    print(\"Firs-class honours\")\n} else if (average &lt; 70 & average &gt; 59) {\n    print(\"Second-class honours\")\n} else {\n    print(\"Third-class honours\")\n}\n\n[1] \"Third-class honours\"\n\n\n\nIt’s not a good idea to write nested code (lots of else_if() or ifelse())\nIt is not easy to read or debug"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#coding-style-matters",
    "href": "2025/weeks/week04/slides4.html#coding-style-matters",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Coding style MATTERS!",
    "text": "Coding style MATTERS!\n\nBoth the “if” and “function” statements should almost always be accompanied by curly braces {}, and the code within them should be indented. Start opening curly braces on a new line, close them on their own line, except when followed by “else,” and maintain code indentation inside them\n\n# Bad example\nif (y &lt; 0 && debug)\nmessage(\"Y is negative\")\n\nif (y == 0) {\n  log(x)\n} \nelse {\n  y ^ x\n}\n\n# Good example\nif (y &lt; 0 && debug) {\n  message(\"Y is negative\")\n}\n\nif (y == 0) {\n  log(x)\n} else {\n  y ^ x\n}"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#if-vs-if_else",
    "href": "2025/weeks/week04/slides4.html#if-vs-if_else",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "if vs if_else",
    "text": "if vs if_else\n\nVector operations are where you make multiple comparisons simultaneously for each value stored inside a vector\nImagine you wanted to create a new column identifying whether or not a country-year observation has a life expectancy of at least 35\n\n\ngap &lt;- gapminder\nhead(gap)\n\n# A tibble: 6 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\ngap_if &lt;- gap %&gt;%\n   mutate(life.35 = if(lifeExp &gt;= 35){\n     1\n   } else {\n     0\n   })\nhead(gap_if)\n\nTry this code and tell us what you think it’s wrong"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#use-if_else-instead",
    "href": "2025/weeks/week04/slides4.html#use-if_else-instead",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Use if_else() instead",
    "text": "Use if_else() instead\n\nThis vectorises the if-else comparison and makes a separate comparison for each row of the data frame\n\n\ngap_ifelse &lt;- gap %&gt;%\n  mutate(life.35 = if_else(lifeExp &gt;= 35, 1, 0))\n\ngap_ifelse\n\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap life.35\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.       0\n 2 Afghanistan Asia       1957    30.3  9240934      821.       0\n 3 Afghanistan Asia       1962    32.0 10267083      853.       0\n 4 Afghanistan Asia       1967    34.0 11537966      836.       0\n 5 Afghanistan Asia       1972    36.1 13079460      740.       1\n 6 Afghanistan Asia       1977    38.4 14880372      786.       1\n 7 Afghanistan Asia       1982    39.9 12881816      978.       1\n 8 Afghanistan Asia       1987    40.8 13867957      852.       1\n 9 Afghanistan Asia       1992    41.7 16317921      649.       1\n10 Afghanistan Asia       1997    41.8 22227415      635.       1\n# ℹ 1,694 more rows"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#functions-1",
    "href": "2025/weeks/week04/slides4.html#functions-1",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Functions",
    "text": "Functions\n\nFunctions are the basic building blocks of programmes\nThink of them as mini-scripts. R provides many built-in functions and allows programmers to define their own functions. We have already used dozens of functions created by others (e.g. filter() and sd())\nYou will learn how to write you own functions. The details are pretty simple, yet as usual it is good to get lots of practice!"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#why-we-need-functions",
    "href": "2025/weeks/week04/slides4.html#why-we-need-functions",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Why we need functions",
    "text": "Why we need functions\n\nFunctions allow you to automate common tasks in a more powerful and general way than copy-and-pasting\n\ngap &lt;- gapminder\n\ngap_norm &lt;- gap %&gt;%\n  mutate(pop_norm = (pop - min(pop)) / (max(pop) - min (pop)),\n         gdp_norm = (gdpPercap - min(gdpPercap)) / (max(gdpPercap) - min (gdpPercap)),\n         life_norm = (lifeExp - min(lifeExp) / (max(pop)) - min (lifeExp)))\n\nsummary(gap_norm$pop_norm)\n\nTake a look at the code above and spot the mistake?"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#key-components-of-functions",
    "href": "2025/weeks/week04/slides4.html#key-components-of-functions",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Key components of functions",
    "text": "Key components of functions\n\nName: This should be informative and describe what the function does\nArguments: or list of inputs, to the function. They go inside the parentheses in function()\nThe body: This is the block of code within {} that immediately follows function(…), and it is the code that you develop to perform the action described in the name using the arguments you provide\n\nmy_function &lt;- function(x, y){\n  # do\n  # something\n  # here\n  return(result)\n}"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#writing-a-function",
    "href": "2025/weeks/week04/slides4.html#writing-a-function",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Writing a function",
    "text": "Writing a function\n\nsimple.function &lt;- function(x, y){\n  print(x - y + 1)\n}\n\nsimple.function(x = 2, y = 10)\n\n[1] -7\n\n\n\nNote that return() will only process a single object, so multiple items must usually be returned as a list\n\n\nmultiple.items &lt;- function(x,y){\n  thing1 &lt;- x\n  thing2 &lt;- y\n  return(list(thing1, thing2))\n}\n\nmultiple.items(x = \"some text\", y = \"some data\")\n\n[[1]]\n[1] \"some text\"\n\n[[2]]\n[1] \"some data\""
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#functional-programming-1",
    "href": "2025/weeks/week04/slides4.html#functional-programming-1",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Functional programming",
    "text": "Functional programming\n\nWe will now learn how to use purrr to automate workflow in a cleaner, faster, and more extendable way\n\nTask: replacing -99 with NA\n\nLet’s imagine df is a survey dataset.\na, b, c, d = Survey questions\n-99: missing responses\n\n\n# Data\n\nset.seed(1234) # for reproducibility\n\ndf &lt;- tibble(\n  \"a\" = sample(c(-99, 1:3), size = 5, replace = TRUE),\n  \"b\" = sample(c(-99, 1:3), size = 5, replace = TRUE),\n  \"c\" = sample(c(-99, 1:3), size = 5, replace = TRUE),\n  \"d\" = sample(c(-99, 1:3), size = 5, replace = TRUE)\n)"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#how-would-you-replace--99-with-na-by-copy-and-pasting",
    "href": "2025/weeks/week04/slides4.html#how-would-you-replace--99-with-na-by-copy-and-pasting",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "How would you replace -99 with NA by copy-and-pasting?",
    "text": "How would you replace -99 with NA by copy-and-pasting?\n\n# Copy and paste\ndf$a[df$a == -99] &lt;- NA\ndf$b[df$b == -99] &lt;- NA\ndf$c[df$c == -99] &lt;- NA\ndf$d[df$d == -99] &lt;- NA\n\ndf\n\n# A tibble: 5 × 4\n      a     b     c     d\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     3     3     3     1\n2     3     2     3     1\n3     1    NA     1     2\n4     1    NA     2     1\n5    NA     1     1     3"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#lets-use-a-function-for-this-operation",
    "href": "2025/weeks/week04/slides4.html#lets-use-a-function-for-this-operation",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Let’s use a function for this operation",
    "text": "Let’s use a function for this operation\n\nIf you write a function, you gain efficiency because you don’t need to copy and paste the computation part\n\n\nfix_missing &lt;- function(x) {\n  x[x == -99] &lt;- NA\n  x\n}\n\n# Apply function to each column (vector)\n\ndf$a &lt;- fix_missing(df$a)\ndf$b &lt;- fix_missing(df$b)\ndf$c &lt;- fix_missing(df$c)\ndf$d &lt;- fix_missing(df$d)\n\ndf\n\n# A tibble: 5 × 4\n      a     b     c     d\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     3     3     3     1\n2     3     2     3     1\n3     1    NA     1     2\n4     1    NA     2     1\n5    NA     1     1     3"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#how-about-a-tidy-solution-purrr",
    "href": "2025/weeks/week04/slides4.html#how-about-a-tidy-solution-purrr",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "How about a tidy solution? (purrr)",
    "text": "How about a tidy solution? (purrr)\n\nmap() is a good alternative to for loop\n\n\ndf &lt;- purrr::map_df(df, fix_missing)\n\ndf\n\n# A tibble: 5 × 4\n      a     b     c     d\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     3     3     3     1\n2     3     2     3     1\n3     1    NA     1     2\n4     1    NA     2     1\n5    NA     1     1     3"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#map-is-a-higher-order-function",
    "href": "2025/weeks/week04/slides4.html#map-is-a-higher-order-function",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "map() is a higher-order function",
    "text": "map() is a higher-order function\n\nThis is how map() works\nIt applies a given function to each element of a list/vector."
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#illustrating-why-map-can-be-more-efficient-than-loops",
    "href": "2025/weeks/week04/slides4.html#illustrating-why-map-can-be-more-efficient-than-loops",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Illustrating why map() can be more efficient than loops",
    "text": "Illustrating why map() can be more efficient than loops\n\ndata(\"airquality\")\n\n# Placeholder\nout1 &lt;- vector(\"double\", ncol(airquality))\n\n# Sequence variable\nfor (i in seq_along(airquality)) { \n\n  # Assign an iteration result to each element of the placeholder list \n  out1[[i]] &lt;- mean(airquality[[i]], na.rm = TRUE)\n}\n\n#vs one-liner map()\nout1 &lt;- airquality %&gt;% map_dbl(mean, na.rm = TRUE)\nout1\n\n     Ozone    Solar.R       Wind       Temp      Month        Day \n 42.129310 185.931507   9.957516  77.882353   6.993464  15.803922"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#main-takeaways",
    "href": "2025/weeks/week04/slides4.html#main-takeaways",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Main takeaways",
    "text": "Main takeaways\n\nmap() is more readable, faster, and easily extendable with other data science tasks (e.g. wrangling and visualisation) using %&gt;%\npurrr::map() is simpler to write\nThere is one function for each type of output:\n\nmap() makes a list\nmap_lgl() makes a logical vector\nmap_int() makes an integer vector\nmap_dbl() makes a double vector\nmap_chr() makes a character vector"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#some-data-wrangling-exercises-using-purrr",
    "href": "2025/weeks/week04/slides4.html#some-data-wrangling-exercises-using-purrr",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Some data wrangling exercises using purrr",
    "text": "Some data wrangling exercises using purrr\n\nFiltering:\n\n\n# Create a list of data frames with England's biggest cities and their populations\ndata_list &lt;- list(\n  data.frame(City = c(\"London\", \"Birmingham\", \"Manchester\"),\n             Population = c(8961989, 1141816, 547627)),\n  data.frame(City = c(\"Leeds\", \"Liverpool\", \"Newcastle\"),\n             Population = c(793139, 494814, 148190))\n)\n\n# Define the condition for filtering data frames\npopulation_threshold &lt;- 500000\n\nfiltered_data &lt;- map(data_list, ~ filter(.x, Population &gt;= population_threshold))\n\nfiltered_data\n\n[[1]]\n        City Population\n1     London    8961989\n2 Birmingham    1141816\n3 Manchester     547627\n\n[[2]]\n   City Population\n1 Leeds     793139"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#some-data-wrangling-exercises-using-purrr-ii",
    "href": "2025/weeks/week04/slides4.html#some-data-wrangling-exercises-using-purrr-ii",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Some data wrangling exercises using purrr II",
    "text": "Some data wrangling exercises using purrr II\n\nCombining data frames:\n\n\n# Combine the filtered data frames into a single data frame\ncombined_data &lt;- reduce(filtered_data, bind_rows)\ncombined_data\n\n        City Population\n1     London    8961989\n2 Birmingham    1141816\n3 Manchester     547627\n4      Leeds     793139"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#automate-plotting",
    "href": "2025/weeks/week04/slides4.html#automate-plotting",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Automate plotting",
    "text": "Automate plotting\n\nWe will how to use map() and glue() to automate creating multiple plots\nTask: making the following data visualisation process more efficient\n\ndata(\"airquality\")\n\nairquality %&gt;%\n  ggplot(aes(x = Ozone, y = Solar.R)) +\n  geom_point() +\n  labs(\n    title = \"Relationship between Ozone and Solar.R\",\n    y = \"Solar.R\"\n  )\nairquality %&gt;%\n  ggplot(aes(x = Ozone, y = Wind)) +\n  geom_point() +\n  labs(\n    title = \"Relationship between Ozone and Wind\",\n    y = \"Wind\"\n  )\nairquality %&gt;%\n  ggplot(aes(x = Ozone, y = Temp)) +\n  geom_point() +\n  labs(\n    title = \"Relationship between Ozone and Temp\",\n    y = \"Temp\"\n  )"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#solution-to-the-automation-problem",
    "href": "2025/weeks/week04/slides4.html#solution-to-the-automation-problem",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Solution to the automation problem",
    "text": "Solution to the automation problem\n\nglue() combines strings and objects\n\nFor instance:\n\nnames &lt;- c(\"Nikki\", \"Maria\", \"Ozan\")\n\nfields &lt;- c(\"Economics\", \"Demography\", \"Sociology\")\n\nglue(\"{names} is interested in {fields}.\")\n\nNikki is interested in Economics.\nMaria is interested in Demography.\nOzan is interested in Sociology.\n\n\n\nHence, we can now combine glue() and map()"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#automatic-plotting-function",
    "href": "2025/weeks/week04/slides4.html#automatic-plotting-function",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Automatic plotting function",
    "text": "Automatic plotting function\n\ncreate_point_plot &lt;- function(i) {\n  airquality %&gt;%\n    ggplot(aes_string(x = names(airquality)[1], y = names(airquality)[i])) +\n    geom_point() +\n    labs(\n      title = glue(\"Relationship between Ozone and {names(airquality)[i]}\"),\n      y = glue(\"{names(airquality)[i]}\")\n    )\n}\n\n\nThe final step is to put the function in map()\n\n\nplots_list &lt;- map(2:ncol(airquality), create_point_plot)\nplots_grid &lt;- gridExtra::grid.arrange(grobs = plots_list, ncol = 2) # Adjust ncol as needed"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#automatic-plotting-function-output",
    "href": "2025/weeks/week04/slides4.html#automatic-plotting-function-output",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Automatic plotting function",
    "text": "Automatic plotting function\n\n\n\nplots_grid\n\nTableGrob (3 x 2) \"arrange\": 5 grobs\n  z     cells    name           grob\n1 1 (1-1,1-1) arrange gtable[layout]\n2 2 (1-1,2-2) arrange gtable[layout]\n3 3 (2-2,1-1) arrange gtable[layout]\n4 4 (2-2,2-2) arrange gtable[layout]\n5 5 (3-3,1-1) arrange gtable[layout]"
  },
  {
    "objectID": "2025/weeks/week04/slides4.html#lab-exercise",
    "href": "2025/weeks/week04/slides4.html#lab-exercise",
    "title": "🗓️ Week 04Automating – Functional Programming",
    "section": "Lab exercise",
    "text": "Lab exercise\n\nAgain import the dataset called “Natural disasters (EMDAT)”\nCreate a new public repository on GitHub for this week’s project and add your collaborators\nOpen a new R script and work on the following automating tasks\nUsing purrr, please automate at least one data wrangling task based on the dataset (e.g. summarising data)\nUsing purrr please automate plotting the trends of deaths, injuries, and homelessness caused by all disasters for 5 countries in the dataset\n\n\n\n\nSOCS0100 – Computational Social Science"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#tidy-data",
    "href": "2025/weeks/week03/slides3.html#tidy-data",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Tidy data",
    "text": "Tidy data\n“In the space between chaos and shape, there was another chance.” (C.S. Lewis)\n\nWhat makes data tidy:\n\nEach variable should form a column\nEach observation should form a row\nEach value is a cell; each cell is a single value"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#untidy-data",
    "href": "2025/weeks/week03/slides3.html#untidy-data",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Untidy data",
    "text": "Untidy data"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#rules-for-storing-tidy-data",
    "href": "2025/weeks/week03/slides3.html#rules-for-storing-tidy-data",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Rules for storing tidy data",
    "text": "Rules for storing tidy data\n\nBe consistent\nChoose good names for things\nWrite dates as YYYY-MM-DD\nNo empty cells\nPut just one thing in a cell\nDon’t use font color or highlighting as data"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#why-your-data-should-be-tidy",
    "href": "2025/weeks/week03/slides3.html#why-your-data-should-be-tidy",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Why your data should be tidy",
    "text": "Why your data should be tidy\n\nOpting for a consistent method of data storage offers a broad benefit. When you maintain a uniform data structure, it simplifies the process of mastering tools that interact with it, as they possess a foundational consistency\nA distinct advantage of arranging variables in columns is that it leverages R’s vectorized capabilities. As you discovered in the R workshop, the majority of built-in R functions are designed to operate on vectors of values, which enhances the seamless transformation of tidy data"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#overview-of-data",
    "href": "2025/weeks/week03/slides3.html#overview-of-data",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Overview of data",
    "text": "Overview of data"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#collection-of-r-packages-for-tidy-data",
    "href": "2025/weeks/week03/slides3.html#collection-of-r-packages-for-tidy-data",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Collection of R packages for tidy data",
    "text": "Collection of R packages for tidy data\nIf dataframes are tidy, it’s easy to transform, visualise, model, and program them using tidyverse packages"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#loading-required-packages",
    "href": "2025/weeks/week03/slides3.html#loading-required-packages",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Loading required packages",
    "text": "Loading required packages\n\npacman::p_load(\n  tidyverse, # the tidyverse framework\n  skimr# quickly providing a broad overview of a data frame\n)\n\n\nThe downloaded binary packages are in\n    /var/folders/3b/f__hzkkn7h187ymsbptz__mw0000gn/T//RtmpFBCVhH/downloaded_packages\n\n\n\nThe downloaded binary packages are in\n    /var/folders/3b/f__hzkkn7h187ymsbptz__mw0000gn/T//RtmpFBCVhH/downloaded_packages"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#displaying-and-summarising-data-i",
    "href": "2025/weeks/week03/slides3.html#displaying-and-summarising-data-i",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Displaying and summarising data I",
    "text": "Displaying and summarising data I\nThere are so many different ways of looking at data in R\n\nstr(table1)\n\ntibble [6 × 4] (S3: tbl_df/tbl/data.frame)\n $ country   : chr [1:6] \"Afghanistan\" \"Afghanistan\" \"Brazil\" \"Brazil\" ...\n $ year      : num [1:6] 1999 2000 1999 2000 1999 ...\n $ cases     : num [1:6] 745 2666 37737 80488 212258 ...\n $ population: num [1:6] 2.00e+07 2.06e+07 1.72e+08 1.75e+08 1.27e+09 ...\n\nglimpse(table1)\n\nRows: 6\nColumns: 4\n$ country    &lt;chr&gt; \"Afghanistan\", \"Afghanistan\", \"Brazil\", \"Brazil\", \"China\", …\n$ year       &lt;dbl&gt; 1999, 2000, 1999, 2000, 1999, 2000\n$ cases      &lt;dbl&gt; 745, 2666, 37737, 80488, 212258, 213766\n$ population &lt;dbl&gt; 19987071, 20595360, 172006362, 174504898, 1272915272, 12804…\n\n#skim(table1)"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#displaying-and-summarising-data-ii",
    "href": "2025/weeks/week03/slides3.html#displaying-and-summarising-data-ii",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Displaying and summarising data II",
    "text": "Displaying and summarising data II\n\nstarwars %&gt;%\n  select(name, height, mass)\n\n# A tibble: 87 × 3\n   name               height  mass\n   &lt;chr&gt;               &lt;int&gt; &lt;dbl&gt;\n 1 Luke Skywalker        172    77\n 2 C-3PO                 167    75\n 3 R2-D2                  96    32\n 4 Darth Vader           202   136\n 5 Leia Organa           150    49\n 6 Owen Lars             178   120\n 7 Beru Whitesun Lars    165    75\n 8 R5-D4                  97    32\n 9 Biggs Darklighter     183    84\n10 Obi-Wan Kenobi        182    77\n# ℹ 77 more rows\n\nstarwars %&gt;%\n  group_by(gender) %&gt;%\n  summarize(\n    avg_height = mean(height, na.rm = TRUE) %&gt;% round(2)\n  )\n\n# A tibble: 3 × 2\n  gender    avg_height\n  &lt;chr&gt;          &lt;dbl&gt;\n1 feminine        167.\n2 masculine       177.\n3 &lt;NA&gt;            175"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#reshaping",
    "href": "2025/weeks/week03/slides3.html#reshaping",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Reshaping",
    "text": "Reshaping"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#pivoting",
    "href": "2025/weeks/week03/slides3.html#pivoting",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Pivoting",
    "text": "Pivoting"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#pivot-long",
    "href": "2025/weeks/week03/slides3.html#pivot-long",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Pivot long",
    "text": "Pivot long\n\npivot_longer() increases the number of rows (longer) and decreases the number of columns. The inverse function is pivot_wider()\nThe names of the ID### columns rotate into an index row (number), and the measure values shift over to the corresponding number and group"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#pivot-longer",
    "href": "2025/weeks/week03/slides3.html#pivot-longer",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Pivot longer",
    "text": "Pivot longer\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\n\ntable4a %&gt;%\n  pivot_longer(\n    cols = c(\"1999\", \"2000\"), # Selected columns\n    names_to = \"year\", # Shorter columns (the columns going to be in one column called year)\n    values_to = \"cases\"\n  ) # Longer rows (the values are going to be in a separate column called named cases)\n\n# A tibble: 6 × 3\n  country     year   cases\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#pivot-longer-another-example",
    "href": "2025/weeks/week03/slides3.html#pivot-longer-another-example",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Pivot longer (another example)",
    "text": "Pivot longer (another example)\n\nbillboard\n\n# A tibble: 317 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   &lt;chr&gt;      &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 307 more rows\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;, …"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#use-pivot-longer",
    "href": "2025/weeks/week03/slides3.html#use-pivot-longer",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Use pivot longer",
    "text": "Use pivot longer\n\nbillboard %&gt;%\n  pivot_longer(\n    cols = starts_with(\"wk\"), # Use regular expressions\n    names_to = \"week\",\n    values_to = \"rank\",\n    values_drop_na = TRUE # Drop NAs\n  )\n\n# A tibble: 5,307 × 5\n   artist  track                   date.entered week   rank\n   &lt;chr&gt;   &lt;chr&gt;                   &lt;date&gt;       &lt;chr&gt; &lt;dbl&gt;\n 1 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk1      87\n 2 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk2      82\n 3 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk3      72\n 4 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk4      77\n 5 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk5      87\n 6 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk6      94\n 7 2 Pac   Baby Don't Cry (Keep... 2000-02-26   wk7      99\n 8 2Ge+her The Hardest Part Of ... 2000-09-02   wk1      91\n 9 2Ge+her The Hardest Part Of ... 2000-09-02   wk2      87\n10 2Ge+her The Hardest Part Of ... 2000-09-02   wk3      92\n# ℹ 5,297 more rows"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#pivot-wide",
    "href": "2025/weeks/week03/slides3.html#pivot-wide",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Pivot wide",
    "text": "Pivot wide\nNow the values in number become the new column names, and the measure values get inserted into the intersection of ID### columns and group"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#use-pivot-wider",
    "href": "2025/weeks/week03/slides3.html#use-pivot-wider",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Use pivot wider",
    "text": "Use pivot wider\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n\ntable2 %&gt;%\n  pivot_wider(\n    names_from = type, # first\n    values_from = count # second\n  )\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#further-challenges-separating",
    "href": "2025/weeks/week03/slides3.html#further-challenges-separating",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Further challenges (separating)",
    "text": "Further challenges (separating)\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\nYou can specify how to separate joined values\n\ntable3 %&gt;%\n  separate(rate,\n    into = c(\"cases\", \"population\"),\n    sep = \"/\"\n  )\n\n# A tibble: 6 × 4\n  country      year cases  population\n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n1 Afghanistan  1999 745    19987071  \n2 Afghanistan  2000 2666   20595360  \n3 Brazil       1999 37737  172006362 \n4 Brazil       2000 80488  174504898 \n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#grammar-of-data-wrangling",
    "href": "2025/weeks/week03/slides3.html#grammar-of-data-wrangling",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Grammar of data wrangling",
    "text": "Grammar of data wrangling\nThere is a package specifically designed for helping you wrangle your data. This package is called dplyr and will allow you to easily accomplish many of the data wrangling tasks necessary\n\n%&gt;% - pipe operator for chaining a sequence of operations\nglimpse() - get an overview of what’s included in dataset\nfilter() - filter rows\nselect() - select, rename, and reorder columns\nrename() - rename columns\narrange() - reorder rows\nmutate() - create a new column\ngroup_by() - group variables\nsummarize() - summarize information within a dataset\nleft_join() - combine data across data frame"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#rearranging-data",
    "href": "2025/weeks/week03/slides3.html#rearranging-data",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Rearranging data",
    "text": "Rearranging data\n\nglimpse(mtcars)\n\nRows: 32\nColumns: 11\n$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n\n\n\ndplyr::arrange(mtcars, mpg) # Low to High (default)"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#rearranging-data-output",
    "href": "2025/weeks/week03/slides3.html#rearranging-data-output",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Rearranging data",
    "text": "Rearranging data\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n\n#dplyr::arrange(mtcars, desc(mpg)) # High to Row"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#renaming-columns",
    "href": "2025/weeks/week03/slides3.html#renaming-columns",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Renaming columns",
    "text": "Renaming columns\n\ndf &lt;- mtcars %&gt;% rename(milepergalon = mpg)\nglimpse(df)"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#renaming-columns-output",
    "href": "2025/weeks/week03/slides3.html#renaming-columns-output",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Renaming columns",
    "text": "Renaming columns\n\nRows: 32\nColumns: 11\n$ milepergalon &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.…\n$ cyl          &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, …\n$ disp         &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 1…\n$ hp           &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, …\n$ drat         &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.9…\n$ wt           &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3…\n$ qsec         &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 2…\n$ vs           &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, …\n$ am           &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, …\n$ gear         &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, …\n$ carb         &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, …"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#subsetting-observations-row",
    "href": "2025/weeks/week03/slides3.html#subsetting-observations-row",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Subsetting observations (row)",
    "text": "Subsetting observations (row)\nAdding single condition:\n\nstarwars %&gt;%\n  dplyr::filter(sex == \"female\") %&gt;%\n  arrange(desc(height))\n\n# A tibble: 16 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Taun We     213  NA   none       grey       black             NA fema… femin…\n 2 Padmé A…    185  45   brown      light      brown             46 fema… femin…\n 3 Adi Gal…    184  50   none       dark       blue              NA fema… femin…\n 4 Ayla Se…    178  55   none       blue       hazel             48 fema… femin…\n 5 Shaak Ti    178  57   none       red, blue… black             NA fema… femin…\n 6 Luminar…    170  56.2 black      yellow     blue              58 fema… femin…\n 7 Zam Wes…    168  55   blonde     fair, gre… yellow            NA fema… femin…\n 8 Jocasta…    167  NA   white      fair       blue              NA fema… femin…\n 9 Barriss…    166  50   black      yellow     blue              40 fema… femin…\n10 Beru Wh…    165  75   brown      light      blue              47 fema… femin…\n11 Dormé       165  NA   brown      light      brown             NA fema… femin…\n12 Shmi Sk…    163  NA   black      fair       brown             72 fema… femin…\n13 Leia Or…    150  49   brown      light      brown             19 fema… femin…\n14 Mon Mot…    150  NA   auburn     fair       blue              48 fema… femin…\n15 Rey          NA  NA   brown      light      hazel             NA fema… femin…\n16 Captain…     NA  NA   none       none       unknown           NA fema… femin…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#subsetting-observations-row-1",
    "href": "2025/weeks/week03/slides3.html#subsetting-observations-row-1",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Subsetting observations (row)",
    "text": "Subsetting observations (row)\nAdding multiple condition:\n\nstarwars %&gt;%\n  dplyr::filter(height &lt; 180 & height &gt; 160) \n\n# A tibble: 23 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Luke Sk…    172    77 blond      fair       blue              19 male  mascu…\n 2 C-3PO       167    75 &lt;NA&gt;       gold       yellow           112 none  mascu…\n 3 Owen La…    178   120 brown, gr… light      blue              52 male  mascu…\n 4 Beru Wh…    165    75 brown      light      blue              47 fema… femin…\n 5 Greedo      173    74 &lt;NA&gt;       green      black             44 male  mascu…\n 6 Jabba D…    175  1358 &lt;NA&gt;       green-tan… orange           600 herm… mascu…\n 7 Wedge A…    170    77 brown      fair       hazel             21 male  mascu…\n 8 Palpati…    170    75 grey       pale       yellow            82 male  mascu…\n 9 Lando C…    177    79 black      dark       brown             31 male  mascu…\n10 Lobot       175    79 none       light      blue              37 male  mascu…\n# ℹ 13 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#further-examples",
    "href": "2025/weeks/week03/slides3.html#further-examples",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Further examples",
    "text": "Further examples\nFilter brown and black hair_color\n\nstarwars %&gt;%\n  dplyr::filter(hair_color %in% c(\"black\", \"brown\"))\n\n# A tibble: 31 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n 1 Leia Or…    150  49   brown      light      brown           19   fema… femin…\n 2 Beru Wh…    165  75   brown      light      blue            47   fema… femin…\n 3 Biggs D…    183  84   black      light      brown           24   male  mascu…\n 4 Chewbac…    228 112   brown      unknown    blue           200   male  mascu…\n 5 Han Solo    180  80   brown      fair       brown           29   male  mascu…\n 6 Wedge A…    170  77   brown      fair       hazel           21   male  mascu…\n 7 Jek Ton…    180 110   brown      fair       blue            NA   &lt;NA&gt;  &lt;NA&gt;  \n 8 Boba Fe…    183  78.2 black      fair       brown           31.5 male  mascu…\n 9 Lando C…    177  79   black      dark       brown           31   male  mascu…\n10 Arvel C…     NA  NA   brown      fair       brown           NA   male  mascu…\n# ℹ 21 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#choose-row-by-position",
    "href": "2025/weeks/week03/slides3.html#choose-row-by-position",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Choose row by position",
    "text": "Choose row by position\n\nstarwars %&gt;%\n  arrange(desc(height)) %&gt;%\n  slice(1:6)\n\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Yarael P…    264    NA none       white      yellow            NA male  mascu…\n2 Tarfful      234   136 brown      brown      blue              NA male  mascu…\n3 Lama Su      229    88 none       grey       black             NA male  mascu…\n4 Chewbacca    228   112 brown      unknown    blue             200 male  mascu…\n5 Roos Tar…    224    82 none       grey       orange            NA male  mascu…\n6 Grievous     216   159 none       brown, wh… green, y…         NA male  mascu…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#subsetting-variables-columns",
    "href": "2025/weeks/week03/slides3.html#subsetting-variables-columns",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Subsetting variables (columns)",
    "text": "Subsetting variables (columns)\n\nnames(msleep)\n\n [1] \"name\"         \"genus\"        \"vore\"         \"order\"        \"conservation\"\n [6] \"sleep_total\"  \"sleep_rem\"    \"sleep_cycle\"  \"awake\"        \"brainwt\"     \n[11] \"bodywt\"      \n\n# Only numeric\nmsleep %&gt;%\n  dplyr::select(where(is.numeric))\n\n# A tibble: 83 × 6\n   sleep_total sleep_rem sleep_cycle awake  brainwt  bodywt\n         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n 1        12.1      NA        NA      11.9 NA        50    \n 2        17         1.8      NA       7    0.0155    0.48 \n 3        14.4       2.4      NA       9.6 NA         1.35 \n 4        14.9       2.3       0.133   9.1  0.00029   0.019\n 5         4         0.7       0.667  20    0.423   600    \n 6        14.4       2.2       0.767   9.6 NA         3.85 \n 7         8.7       1.4       0.383  15.3 NA        20.5  \n 8         7        NA        NA      17   NA         0.045\n 9        10.1       2.9       0.333  13.9  0.07     14    \n10         3        NA        NA      21    0.0982   14.8  \n# ℹ 73 more rows"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#subsetting-variables-columns-by-their-names",
    "href": "2025/weeks/week03/slides3.html#subsetting-variables-columns-by-their-names",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Subsetting variables (columns) by their names",
    "text": "Subsetting variables (columns) by their names\n\nmsleep %&gt;%\n  dplyr::select(contains(\"sleep\"))\n\n# A tibble: 83 × 3\n   sleep_total sleep_rem sleep_cycle\n         &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;\n 1        12.1      NA        NA    \n 2        17         1.8      NA    \n 3        14.4       2.4      NA    \n 4        14.9       2.3       0.133\n 5         4         0.7       0.667\n 6        14.4       2.2       0.767\n 7         8.7       1.4       0.383\n 8         7        NA        NA    \n 9        10.1       2.9       0.333\n10         3        NA        NA    \n# ℹ 73 more rows"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#additional-tips",
    "href": "2025/weeks/week03/slides3.html#additional-tips",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Additional tips",
    "text": "Additional tips\nReal-world data are usually messier. The janitor package is useful to fix this kind of problem\n\nmessy_data &lt;- tibble::tribble(\n  ~\"ColNum1\", ~\"COLNUM2\", ~\"COL & NUM3\",\n  1, 2, 3\n)\n\nmessy_data\n\n# A tibble: 1 × 3\n  ColNum1 COLNUM2 `COL & NUM3`\n    &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n1       1       2            3\n\n\n\npacman::p_load(janitor)\n\n\nThe downloaded binary packages are in\n    /var/folders/3b/f__hzkkn7h187ymsbptz__mw0000gn/T//RtmpFBCVhH/downloaded_packages\n\njanitor::clean_names(messy_data)\n\n# A tibble: 1 × 3\n  col_num1 colnum2 col_num3\n     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n1        1       2        3"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#creating-new-columns",
    "href": "2025/weeks/week03/slides3.html#creating-new-columns",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Creating new columns",
    "text": "Creating new columns\nReturning to our msleep dataset, after filtering and re-ordering, we can create a new column with mutate(). Within mutate(), we will calculate the number of minutes each mammal sleeps by multiplying the number of hours each animal sleeps by 60 mins\n\nmsleep %&gt;%\n  filter(order == \"Primates\", sleep_total &gt; 10) %&gt;%\n  select(name, sleep_rem, sleep_cycle, sleep_total) %&gt;%\n  arrange(name) %&gt;%\n  mutate(sleep_total_min = sleep_total * 60)\n\n# A tibble: 5 × 5\n  name         sleep_rem sleep_cycle sleep_total sleep_total_min\n  &lt;chr&gt;            &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;           &lt;dbl&gt;\n1 Macaque            1.2        0.75        10.1             606\n2 Owl monkey         1.8       NA           17              1020\n3 Patas monkey       1.1       NA           10.9             654\n4 Potto             NA         NA           11               660\n5 Slow loris        NA         NA           11               660"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#summarising-exercise",
    "href": "2025/weeks/week03/slides3.html#summarising-exercise",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Summarising exercise",
    "text": "Summarising exercise\n\ntablea &lt;- msleep %&gt;%\n  group_by(order) %&gt;%\n  summarise(\n    n = n(),\n    mean_sleep = mean(sleep_total),\n    sd_sleep = sd(sleep_total)\n  )\ntablea\n\n# A tibble: 19 × 4\n   order               n mean_sleep sd_sleep\n   &lt;chr&gt;           &lt;int&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 Afrosoricida        1      15.6    NA    \n 2 Artiodactyla        6       4.52    2.51 \n 3 Carnivora          12      10.1     3.50 \n 4 Cetacea             3       4.5     1.57 \n 5 Chiroptera          2      19.8     0.141\n 6 Cingulata           2      17.8     0.495\n 7 Didelphimorphia     2      18.7     0.990\n 8 Diprotodontia       2      12.4     1.84 \n 9 Erinaceomorpha      2      10.2     0.141\n10 Hyracoidea          3       5.67    0.551\n11 Lagomorpha          1       8.4    NA    \n12 Monotremata         1       8.6    NA    \n13 Perissodactyla      3       3.47    0.814\n14 Pilosa              1      14.4    NA    \n15 Primates           12      10.5     2.21 \n16 Proboscidea         2       3.6     0.424\n17 Rodentia           22      12.5     2.81 \n18 Scandentia          1       8.9    NA    \n19 Soricomorpha        5      11.1     2.70"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#producing-tables",
    "href": "2025/weeks/week03/slides3.html#producing-tables",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Producing tables",
    "text": "Producing tables\n\npacman::p_load(\n  kableExtra,\n  flextable\n)"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#producing-tables-output",
    "href": "2025/weeks/week03/slides3.html#producing-tables-output",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Producing tables",
    "text": "Producing tables\n\n\nThe downloaded binary packages are in\n    /var/folders/3b/f__hzkkn7h187ymsbptz__mw0000gn/T//RtmpFBCVhH/downloaded_packages\n\n\n\nThe downloaded binary packages are in\n    /var/folders/3b/f__hzkkn7h187ymsbptz__mw0000gn/T//RtmpFBCVhH/downloaded_packages\n\n# For HTML and LaTeX\ntablea %&gt;% kableExtra::kable()\n\n\n\n\norder\nn\nmean_sleep\nsd_sleep\n\n\n\n\nAfrosoricida\n1\n15.600000\nNA\n\n\nArtiodactyla\n6\n4.516667\n2.5119050\n\n\nCarnivora\n12\n10.116667\n3.5021638\n\n\nCetacea\n3\n4.500000\n1.5716234\n\n\nChiroptera\n2\n19.800000\n0.1414214\n\n\nCingulata\n2\n17.750000\n0.4949747\n\n\nDidelphimorphia\n2\n18.700000\n0.9899495\n\n\nDiprotodontia\n2\n12.400000\n1.8384776\n\n\nErinaceomorpha\n2\n10.200000\n0.1414214\n\n\nHyracoidea\n3\n5.666667\n0.5507571\n\n\nLagomorpha\n1\n8.400000\nNA\n\n\nMonotremata\n1\n8.600000\nNA\n\n\nPerissodactyla\n3\n3.466667\n0.8144528\n\n\nPilosa\n1\n14.400000\nNA\n\n\nPrimates\n12\n10.500000\n2.2098951\n\n\nProboscidea\n2\n3.600000\n0.4242641\n\n\nRodentia\n22\n12.468182\n2.8132994\n\n\nScandentia\n1\n8.900000\nNA\n\n\nSoricomorpha\n5\n11.100000\n2.7046257"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#grouped-summaries",
    "href": "2025/weeks/week03/slides3.html#grouped-summaries",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Grouped summaries",
    "text": "Grouped summaries\n\nmsleep %&gt;%\n  group_by(order) %&gt;%\n  summarise(mean_sleep = mean(sleep_total))\n\n# A tibble: 19 × 2\n   order           mean_sleep\n   &lt;chr&gt;                &lt;dbl&gt;\n 1 Afrosoricida         15.6 \n 2 Artiodactyla          4.52\n 3 Carnivora            10.1 \n 4 Cetacea               4.5 \n 5 Chiroptera           19.8 \n 6 Cingulata            17.8 \n 7 Didelphimorphia      18.7 \n 8 Diprotodontia        12.4 \n 9 Erinaceomorpha       10.2 \n10 Hyracoidea            5.67\n11 Lagomorpha            8.4 \n12 Monotremata           8.6 \n13 Perissodactyla        3.47\n14 Pilosa               14.4 \n15 Primates             10.5 \n16 Proboscidea           3.6 \n17 Rodentia             12.5 \n18 Scandentia            8.9 \n19 Soricomorpha         11.1"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#combining-data-across-data-frames",
    "href": "2025/weeks/week03/slides3.html#combining-data-across-data-frames",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Combining Data Across Data Frames",
    "text": "Combining Data Across Data Frames\nThere is often information stored in several separate data frames that you’ll want in a single data frame. There are many different ways to join separate data frames. Here, we’ll demonstrate how left_join() function works\n\n#create data frame\ndf1 &lt;- data.frame(a = c('a', 'b', 'c', 'd', 'e', 'f'),\n                  b = c(12, 14, 14, 18, 22, 23))\n\ndf2 &lt;- data.frame(a = c('a', 'a', 'a', 'b', 'b', 'b'),\n                  c = c(23, 24, 33, 34, 37, 41))\n\ndf3 &lt;- data.frame(a = c('d', 'e', 'f', 'g', 'h', 'i'),\n                  d = c(23, 24, 33, 34, 37, 41))\ncombined_data &lt;- df1 %&gt;%\n              left_join(df2, by='a') %&gt;%\n              left_join(df3, by='a')\ncombined_data\n\n   a  b  c  d\n1  a 12 23 NA\n2  a 12 24 NA\n3  a 12 33 NA\n4  b 14 34 NA\n5  b 14 37 NA\n6  b 14 41 NA\n7  c 14 NA NA\n8  d 18 NA 23\n9  e 22 NA 24\n10 f 23 NA 33"
  },
  {
    "objectID": "2025/weeks/week03/slides3.html#lab-exercise",
    "href": "2025/weeks/week03/slides3.html#lab-exercise",
    "title": "🗓️ Week 03Wrangling and Tidying Data",
    "section": "Lab exercise",
    "text": "Lab exercise\nProblem set:\n\nImport the dataset called “Natural disasters (EMDAT)”: This data has been aggregated by Our World in Data by country and year based on the raw database of disasters published by EM-DAT, CRED / UCLouvain, Brussels, Belgium\nCreate a new public repository for the project (e.g. README.md, scripts)\nInspect the data briefly and identify its structure\nSelect the variables that capture the information related to deaths, injuries, homelessness caused by all disasters. You can rename the variables\nCreate three tables showing the highest averages of deaths, injuries, and homelessness (e.g. top 10)\nCreate a new binary variable in the original dataset to show whether the number of deaths by all disasters is higher than 500 in a given year\nReshape the dataset (selected version) and save it as a separate dataset in your repository\n\n\n\n\nSOCS0100 – Computational Social Science"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#data-sharing",
    "href": "2025/weeks/week02/slides2.html#data-sharing",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Data Sharing",
    "text": "Data Sharing\n\nData sharing serves at least two distinct scientific purposes: 1) evaluative and 2) generative\n\nThe evaluative purpose of sharing data is to increase the credibility of findings by allowing the evidence to be directly verified and interrogated by others\nThe generative purpose is to enable other investigators to pursue new questions and thereby maximise the total potential research contribution of data"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#why-are-data-sharing-policies-necessary",
    "href": "2025/weeks/week02/slides2.html#why-are-data-sharing-policies-necessary",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Why are Data-sharing Policies Necessary?",
    "text": "Why are Data-sharing Policies Necessary?\n\nThe code presents data sharing as a matter of norms: researchers have an ethical obligation to allow colleagues to verify results and, if possible, to make their dataset broadly available after they have finished with it\nIn 2006, a group of Dutch psychologists sought to obtain data for all empirical studies published in two issues of four major psychology journals\n\nThey were successful only 27 percent of the time (Wicherts et al. 2006). Additionally, the studies for which authors did not share data were more likely to report weaker evidence and contain simple reporting errors"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#private-data",
    "href": "2025/weeks/week02/slides2.html#private-data",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Private Data",
    "text": "Private Data\n\nData are confidential when researchers have information about the identity of participants but agree to keep identities private\nData are anonymous when researchers themselves do not know respondents’ identities"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#anonymizing-data",
    "href": "2025/weeks/week02/slides2.html#anonymizing-data",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Anonymizing Data",
    "text": "Anonymizing Data\n\nDirect identifiers are variables that obviously identify individuals, including names, email addresses, and social security numbers. Of course, these must be removed in order for the resulting dataset to be anonymous. But just because direct identifiers have been removed does not mean the data are truly anonymous\nFor instance, Netflix once sponsored a contest in which data scientists were given information about how users had rated some films and asked to predict how those users would rate others. The dataset included only seemingly minimal information: a random ID number for individuals, the film, the date of the rating, and the number of stars given. Narayanan and Shmatikov (2008) demonstrated that one could use correspondences in the dates of reviews between the Netflix data and the IMDB site to match some IDs in the Netflix data to IMDB usernames, and some IMDB usernames could then be easily connected to people’s real identities"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#making-your-data-and-coding-available",
    "href": "2025/weeks/week02/slides2.html#making-your-data-and-coding-available",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Making Your Data and Coding Available",
    "text": "Making Your Data and Coding Available\n\nResearchers have often made data public by simply posting a file on their personal websites, but this is far from best practice nowadays. Personal websites come and go, whereas data archivists’ jobs require them to think in terms of posterity\nA clear and thoughtful description of what should go in a data replication package, for instance, has been provided by the American Journal of Political Science (AJPS; Jacoby and Lupton 2016). Their guidelines break the work of assembling a replication package into four components: README file; analysis datasets; software commands; and information to reconstruct analysis dataset"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#readme-file",
    "href": "2025/weeks/week02/slides2.html#readme-file",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "README File",
    "text": "README File\n\nThe README file walks the others through the contents of the replication package and how they relate to the contents of the project. We think this is most effectively organised by presenting the data files to be used first, and then referring to each table, figure, or result in the paper and indicating the command file (or header within a larger command file) used to generate each one\nA README is often the first item a visitor will see when visiting your repository. README files typically include information on:\n\nWhat the project does\nHow users can get started with the project\nWhere users can get help with your project\nWho maintains and contributes to the project"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#about-readmes",
    "href": "2025/weeks/week02/slides2.html#about-readmes",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "About READMEs",
    "text": "About READMEs\n\nYou can add a README file to a repository to communicate important information about your project. A README, along with a repository license, citation file, contribution guidelines, and a code of conduct, communicates expectations for your project and helps you manage contributions\nFor more information about providing guidelines for your project, see “Adding a code of conduct to your project” and “Setting up your project for healthy contributions”\nIf a repository contains more than one README file, then the file shown is chosen from locations in the following order: the .github directory, then the repository’s root directory, and finally the docs directory"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#why-we-need-computational-thinking",
    "href": "2025/weeks/week02/slides2.html#why-we-need-computational-thinking",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Why we need computational thinking",
    "text": "Why we need computational thinking\n\nIf social scientists want to work efficiently, they should make the most of modern programming languages, which excel at automating tasks\n\nConsider a UCL student or researcher who wishes to streamline their work. Instead of manually gathering and managing data, they could opt to create a reproducible workflow that automatically collects, parses, and organises the information into interconnected databases. This approach also involves the responsibility of maintaining and ensuring the data’s quality. However, it offers the advantage of reducing data collection costs significantly, greatly enhancing the potential for reproducibility and scalability in their research endeavors. Additionally, they can choose to document their code and share it publicly through their GitHub repository or even package essential functions as open-source libraries for wider accessibility and collaboration\n\nSocial scientists don’t need to become software engineers. Programming is a tool, not a goal. Consider automating parts of social science research using programming as a means to that end"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#version-control",
    "href": "2025/weeks/week02/slides2.html#version-control",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Version Control",
    "text": "Version Control\n\n\nThis helps to track the following information:\n\nWhich changes were made?\nWho made the changes?\nWhen were the changes made?\nWhy were changes needed?"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#a-schematic-git-workflow",
    "href": "2025/weeks/week02/slides2.html#a-schematic-git-workflow",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "A Schematic Git Workflow",
    "text": "A Schematic Git Workflow"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#workflow-scripts-and-projects",
    "href": "2025/weeks/week02/slides2.html#workflow-scripts-and-projects",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Workflow: Scripts and Projects",
    "text": "Workflow: Scripts and Projects\n\nGive yourself more room to work, use the script editor. Open it up by clicking the File menu, selecting New File, then R script, or using the keyboard shortcut Cmd/Ctrl + Shift + N"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#recommendations",
    "href": "2025/weeks/week02/slides2.html#recommendations",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Recommendations",
    "text": "Recommendations\n\nStart your script with the packages you need. That way, if you share your code with others, they can easily see which packages they need to install\nNote that you should never include install.packages() in a script you share\nIf you have multiple packages to install, then please consider using the pacman package\n\ninstall.packages(\"pacman\")\n\npacman::p_load(\n  ggplot2,\n  dplyr, \n  usethis)\n\nMake your R scripts reproducible by replacing library(pkg) with groundhog.library(pkg,date) groundhog.library() loads packages & their dependencies as available on chosen date on CRAN\n\ninstall.packages(\"groundhog\")\nlibrary(\"groundhog\")\npkgs &lt;- c(\"rio\",\"metafor\")\ngroundhog.library(pkgs, \"2021-09-01\")"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#computational-reproducilibility",
    "href": "2025/weeks/week02/slides2.html#computational-reproducilibility",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Computational Reproducilibility",
    "text": "Computational Reproducilibility\n\nComputational reproduciblity = code + data + environment + distribution\nRoger Peng’s checklist\n\nStart with science (avoid vague questions and concepts)\nDon’t do things by hand (not only about automation but also documentation)\nDon’t point and click (same problem)\nTeach a computer (automation also solves documentation to some extent)\nUse some version control\nDon’t save output (instead, keep the input and code)\nSet your seed\nThink about the entire pipeline"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#saving-and-naming",
    "href": "2025/weeks/week02/slides2.html#saving-and-naming",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Saving and naming",
    "text": "Saving and naming\n\nFile names should be machine readable: avoid spaces, symbols, and special characters. Don’t rely on case sensitivity to distinguish files\nFile names should be human readable: use file names to describe what’s in the file\nFile names should play well with default ordering: start file names with numbers so that alphabetical sorting puts them in the order they get used\n\n01-load-data.R\n02-exploratory-analysis.R\n03-model-approach-1.R\n04-model-approach-2.R\nfig-01.png\nfig-02.png\nreport-2022-03-20.qmd\nreport-2022-04-02.qmd\nreport-draft-notes.txt"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#how-to-organise-files-in-a-project",
    "href": "2025/weeks/week02/slides2.html#how-to-organise-files-in-a-project",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "How to Organise Files in a Project",
    "text": "How to Organise Files in a Project\n\nStep 1: Environment is part of your project. If someone cannot reproduce your environment, they won’t be able to run your code\nStep 2: For each project, create a project directory named after the project\n\ndata: raw, processed (all processed, cleaned, and tided)\nfigures\nreports (PDF, HTML, TEX, etc.,)\nresults (model outcomes, etc.,)\nscripts (i.e., functions)\n.gitignore (for Git)\nname_of_project.Rproj (for R)\nREADME.md (for Git)\n\nStep 3: Launch R Studio. Choose File &gt; New project &gt; Browse existing directories &gt; Create project. This allows each project has its workspace"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#projects",
    "href": "2025/weeks/week02/slides2.html#projects",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Projects",
    "text": "Projects\n\nTo help keep your R scripts as the source of truth for your analysis, we highly recommend that you instruct RStudio not to preserve your workspace between sessions"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#rstudio-projects",
    "href": "2025/weeks/week02/slides2.html#rstudio-projects",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "RStudio Projects",
    "text": "RStudio Projects\n\nKeeping all the files associated with a given project (input data, R scripts, analytical results, and figures) together in one directory is such a wise and common practice that RStudio has built-in support for this via projects"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#first-create-a-repo-on-github",
    "href": "2025/weeks/week02/slides2.html#first-create-a-repo-on-github",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "First create a repo on GitHub",
    "text": "First create a repo on GitHub\nVideo"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#cloning",
    "href": "2025/weeks/week02/slides2.html#cloning",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Cloning",
    "text": "Cloning\nVideo"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#working-on-local-repo-and-commit-your-changes",
    "href": "2025/weeks/week02/slides2.html#working-on-local-repo-and-commit-your-changes",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Working on local repo and commit your changes",
    "text": "Working on local repo and commit your changes\nVideo"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#tracking-files",
    "href": "2025/weeks/week02/slides2.html#tracking-files",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Tracking files",
    "text": "Tracking files\nVideo"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#undoing-mistakes",
    "href": "2025/weeks/week02/slides2.html#undoing-mistakes",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Undoing mistakes",
    "text": "Undoing mistakes\n\nImagine you did some work, committed the changes, and pushed them to the remote repo. But you’d like to undo those changes\nSay you added some plain text by mistake to README.md. Running git revert will do the opposite of what you just did (i.e., remove the plain text) and create a new commit. You can then git push this to the remote.\n\ngit revert [commit id]\ngit push"
  },
  {
    "objectID": "2025/weeks/week02/slides2.html#creating-rstudio-project-from-the-existing-directory",
    "href": "2025/weeks/week02/slides2.html#creating-rstudio-project-from-the-existing-directory",
    "title": "🗓️ Week 02Computational Thinking and Reproducibility",
    "section": "Creating RStudio project from the existing directory",
    "text": "Creating RStudio project from the existing directory\nVideo\n\n\n\nSOCS0100 – Computational Social Science"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#your-lecturer",
    "href": "2025/weeks/week01/slides.html#your-lecturer",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Your lecturer",
    "text": "Your lecturer\n\n\n\n\n\nDr  Burak Sonmez Associate Professor in Quantitative Social ScienceDeputy Programme Director of BSc SSDS\n\n\n\n\nPhD in Sociology (University of Essex)\nMA in Longitudinal Social Research (University of Essex)\nBA in Economics (Bilkent University)\n\nExperimental Methods  Social Norms  Trust"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#computational-social-science",
    "href": "2025/weeks/week01/slides.html#computational-social-science",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Computational Social Science",
    "text": "Computational Social Science\n\nIt is an interdisciplinary field that advances theories of human behavior by applying computational techniques to large datasets from social media sites, the Internet, or other digitised archives such as administrative records.\nOur purpose is to map how such computational tools are currently being applied in empirical settings across social sciences."
  },
  {
    "objectID": "2025/weeks/week01/slides.html#social-networks",
    "href": "2025/weeks/week01/slides.html#social-networks",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Social Networks",
    "text": "Social Networks\n\nBail et al. (2019) use Google Search data to track the diffusion of cultural products across global networks. Together, these studies show that microlevel interactions between individuals can generate macrolevel diffusion patterns"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#collective-action-and-opinion-science",
    "href": "2025/weeks/week01/slides.html#collective-action-and-opinion-science",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Collective Action and Opinion Science",
    "text": "Collective Action and Opinion Science\n\nvan de Rijt’s et al. leverage Change.org, an online petitioning platform, to conduct field experiments in which samples of petitions are assigned different quantities of signatures as treatments. These experiments demonstrate the importance of cumulative advantage effects in collective actions (van de Rijt et al. 2016)\nFlores (2017) uses text data from Twitter to show how anti-immigration laws hardened public opinion against immigration in Arizona"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#sociology-of-knowledge",
    "href": "2025/weeks/week01/slides.html#sociology-of-knowledge",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Sociology of Knowledge",
    "text": "Sociology of Knowledge\n\nDrawing on data from JSTOR (one of the largest digital repositories of academic journals), King et al. (2017) show that men are more likely to cite themselves than women —a tendency that increased over the past two decades"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#virtual-reality-and-social-psychology",
    "href": "2025/weeks/week01/slides.html#virtual-reality-and-social-psychology",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Virtual Reality and Social Psychology",
    "text": "Virtual Reality and Social Psychology\n\nvan Loon et al. (2018) paid university students to perform collaborative tasks, but randomised half of them into a treatment condition where they used virtual reality to take the perspective of the other research participants. This intervention increased prosocial behavior\nVirtual reality holds great promise for studying how people respond to social settings within tightly controlled experiments"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#cultural-sociology",
    "href": "2025/weeks/week01/slides.html#cultural-sociology",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Cultural Sociology",
    "text": "Cultural Sociology\n\nSalganik et al. (2006) created an online “music lab” to study how peer influence shapes musical preferences of new artists. In their experiment, participants rated music from obscure bands. In the control condition, participants received no information about its popularity, whereas those in the treatment condition were shown how many times songs were downloaded. Treated respondents were more likely to listen to songs with high download rates and to rate such songs more positively"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#economic-sociology-and-organisations",
    "href": "2025/weeks/week01/slides.html#economic-sociology-and-organisations",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Economic Sociology and Organisations",
    "text": "Economic Sociology and Organisations\n\nStudies indicate certain network compositions benefit women differently than men. For example, women are more likely to succeed if they are part of an inner circle within a network that is predominantly female (Yang et al. 2019)"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#demography-and-population-studies",
    "href": "2025/weeks/week01/slides.html#demography-and-population-studies",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Demography and Population Studies",
    "text": "Demography and Population Studies\n\nLin & Lundquist (2013) find that women are more likely to respond to dating invitations from members of dominant racial and ethnic groups, regardless of social distance\nOutside of the US context, using 58,880 hetero sexual members drawn from an original sample of 876,658 hetero sexual site users, Potârcă & Mills (2015) identify very strong racial and ethnic homogamy across European countries—and particularly those with ethnically homogeneous populations"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#why-git",
    "href": "2025/weeks/week01/slides.html#why-git",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Why Git?",
    "text": "Why Git?\n\nGit is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files – called a repository – in a sane, highly structured way\nWe use it to manage the diverse collection of files that make up typical data analytical projects, which often consist of data, figures, reports, and, yes, source code."
  },
  {
    "objectID": "2025/weeks/week01/slides.html#why-github",
    "href": "2025/weeks/week01/slides.html#why-github",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Why GitHub?",
    "text": "Why GitHub?\n\nIt provides a home for your Git-based projects on the internet. If you have no idea what we are talking about, think of it as DropBox but much, much better\nThe remote host acts as a distribution channel for your Git-managed project. It allows other people to see your stuff, sync up with you, and perhaps even make changes"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#what-is-the-payoff",
    "href": "2025/weeks/week01/slides.html#what-is-the-payoff",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "What is the payoff?",
    "text": "What is the payoff?\n\nExposure: If someone needs to see your work or if you want them to try out your code, they can easily get it from GitHub. If they use Git, they can clone or fork your repository. If they don’t use Git, they can still browse your project on GitHub like a normal website and even grab everything by downloading a zip archive\nCollaboration: If you need to collaborate on data analysis or code development, then everyone should use Git. Use GitHub as your clearinghouse: individuals work independently, then send work back to GitHub for reconciliation and transmission to the rest of the team\n\nManaging a project via Git/GitHub is much more like the Google Doc scenario and enjoys many of the same advantages. It is definitely more complicated than collaborating on a Google Doc, but this puts you in the right mindset"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#who-can-do-what",
    "href": "2025/weeks/week01/slides.html#who-can-do-what",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Who can do what?",
    "text": "Who can do what?\n\nA public repository is readable by the world. The owner can grant higher levels of permission to others, such as the ability to push commits\nA private repository is invisible to the world. The owner can grant read, write (push), or admin access to others\nThere is also a formal notion of an organization, which can be useful for managing repository permissions for entire teams of people\nGitHub repositories are just like Git repositories, but with some added features. For example, GitHub allows for pull requests, where one developer can propose changes to a project that another developer can review and approve. GitHub also includes tools for project management, such as issue tracking and project boards.\nOne key thing to remember is that GitHub doesn’t just store a copy of your code files — it stores the entire history of changes to the files, thanks to Git. This allows other collaborators to view the files at an earlier point in time, or even revert the entire project back to an earlier state."
  },
  {
    "objectID": "2025/weeks/week01/slides.html#register-a-github-account",
    "href": "2025/weeks/week01/slides.html#register-a-github-account",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Register a GitHub account",
    "text": "Register a GitHub account\n\nRegister an account with GitHub. It’s free!\n\nhttps://github.com\n\nYou will be able to upgrade to a paid level of service, apply discounts, join organizations, etc. in the future, so don’t fret about any of that now. Except your username. You might want to give that some thought\n\nVideo"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#install-or-upgrade-r-and-rstudio",
    "href": "2025/weeks/week01/slides.html#install-or-upgrade-r-and-rstudio",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Install or upgrade R and RStudio",
    "text": "Install or upgrade R and RStudio\n\nInstall a pre-compiled binary of R for your OS from here: https://cloud.r-project.org\nAlready have R installed? Hold on: This is a great time to make sure your R installation is current. Check your current version like so:\nR.version.string\nInstall RStudio Desktop: Already have RStudio? Hold on: This is a great time to upgrade to the latest Preview version. Download it here: https://www.rstudio.com/products/rstudio/download/preview/\nUpdate your R packages:\n\nupdate.packages(ask = FALSE, checkBuilt = TRUE)"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#installation-gui",
    "href": "2025/weeks/week01/slides.html#installation-gui",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Installation (GUI)",
    "text": "Installation (GUI)\n\nInstall GitHub Desktop from https://desktop.github.com/"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#install-git",
    "href": "2025/weeks/week01/slides.html#install-git",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Install Git",
    "text": "Install Git\n\nGo to the shell. Enter which git to request the path to your Git executable:\n\nwhich git\n## /usr/bin/git\ngit --version\n## git version 2.42.0\n\nIf you are successful, that’s great! You have Git already. No need to install! Move on. If, instead, you see something more like git: command not found, keep reading\nmacOS users might get an immediate offer to install command line developer tools. Yes, you should accept! Click “Install” and read more below"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#installing-git-through-macos",
    "href": "2025/weeks/week01/slides.html#installing-git-through-macos",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Installing Git through macOS",
    "text": "Installing Git through macOS\n\nInstall the Xcode command line tools (not all of Xcode), which includes Git.\nGo to the shell and enter one of these commands to elicit an offer to install developer command line tools:\n\ngit --version\ngit config\n\nAccept the offer! Click on “Install”.\nHere’s another way to request this installation, more directly:\n\nxcode-select --install\n\nPlease note also that, after upgrading macOS, you might need to re-do the above and/or re-agree to the Xcode license agreement"
  },
  {
    "objectID": "2025/weeks/week01/slides.html#installing-git-through-windows",
    "href": "2025/weeks/week01/slides.html#installing-git-through-windows",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Installing Git through Windows",
    "text": "Installing Git through Windows\n\nInstall Git for Windows, also known as msysgit or “Git Bash”, to get Git in addition to some other useful tools, such as the Bash shell\nGit for Windows leaves the Git executable in a conventional location, which will help you and other programs, e.g. RStudio, find it and use it. This also supports a transition to more expert use, because the “Git Bash” shell will be useful as you venture outside of R/RStudio\n\nNOTE: When asked about “Adjusting your PATH environment”, make sure to select “Git from the command line and also from 3rd-party software”. Otherwise, we believe it is good to accept the defaults.\nNote that RStudio for Windows prefers for Git to be installed below C:/Program Files and this appears to be the default. This implies, for example, that the Git executable on my Windows system is found at C:/Program Files/Git/bin/git.exe. Unless you have specific reasons to otherwise, follow this convention."
  },
  {
    "objectID": "2025/weeks/week01/slides.html#introducing-yourself-to-git",
    "href": "2025/weeks/week01/slides.html#introducing-yourself-to-git",
    "title": "🗓️ Week 01 Introduction to Computational Social Science",
    "section": "Introducing yourself to Git",
    "text": "Introducing yourself to Git\n\nIn the shell\n\ngit config --global user.name \"Burak Sonmez\"\ngit config --global user.email \"burak@example.com\"\ngit config --global --list\n\nsubstituting your name and the email associated with your GitHub account.\nThe usethis package offers an alternative approach. You can set your Git user name and email from within R:\n\n## install if needed (do this exactly once):\n## install.packages(\"usethis\")\n\nlibrary(usethis)\nuse_git_config(user.name = \"Burak Sonmez\", user.email = \"burak@example.org\")\n\n\n\nSOCS0100 – Computational Social Science"
  },
  {
    "objectID": "2025/index.html",
    "href": "2025/index.html",
    "title": "SOCS0100 - Computational Social Science",
    "section": "",
    "text": "📢 Important\n\n\n\n\n\n(01/10/2025)\n\n🗓️ Week 01 lecture material is now available!\n\n\n\n\n\n🧑🏻‍🏫 Module Team\n\nModule Convenor\n\n\n\nBurak Sonmez  Associate Professor in Quantitative Social Science  University College London 📧 b.sonmez@ucl.ac.uk ( at )\nOffice Hours:\n\nWhen:Fridays 16:00-18:00\nWhere:55-59 Gordon Square, 208\nHow to book: Please email me in advance\n\n\n\n\n\n\n📍 Lectures\nFridays 10:00-12:00 at IOE Bedford Way (20) - 642\n\n\n💻 Practical Session Groups\n\nGroup 01\n\n📆 Fridays\n⌚ 12:00 - 13:00\n📍 IOE Bedford Way (20) - 642\n🧑‍🏫 Burak Sonmez"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SOCS0100 - Computational Social Science",
    "section": "",
    "text": "📑 Module Brief\nThis module will provide students with computational and reproducible research tools that are frequently used in social data science. More specifically, it will first introduce students to how to use R Studio and GitHub together as a toolkit for reproducible social science research, illustrating key features of R packages to manage databases and conduct data analysis. Second, students will learn the fundamentals of functional programming, such as familiarity with conditional flow (e.g. if-else conditionals) and creating functions to automate some common tasks for data wrangling and visualisation. Students will also be shown how they can use these functions in data science projects to make their project workflow more efficient. Third, students will be introduced the concepts of ethical Web-scraping, as well as learning how to scrap both static and dynamic webpages. Forth, students will learn how to build and deploy Shiny apps to create interactive data visualisation. Finally, working with different APIs will be introduced.\n\n\n🎯 Learning Objectives\nAfter completing the module students should be able to: - Familiarised with foundations and applications of social data science\n\nEquipped with the skills to understand computational tools for reproducible research\nAware of the potential and pitfalls of social data science\nAble to collaborate in reproducible research projects, using a source-code repository\n\n\nSelect Academic Year/Term:\n 2025/26"
  },
  {
    "objectID": "2025/weeks/week01/page.html",
    "href": "2025/weeks/week01/page.html",
    "title": "🗓️ Week 01 - Introduction to Computational Social Science",
    "section": "",
    "text": "Introduction to computational social science and open science: data and code sharing, project management, and collaborations – the use of git and GitHub. This week students will be introduced how they can set up their own GitHub account and subscribe to the module organisation to engage with both individual and group assignments throughout the module."
  },
  {
    "objectID": "2025/weeks/week01/page.html#lecture-slides",
    "href": "2025/weeks/week01/page.html#lecture-slides",
    "title": "🗓️ Week 01 - Introduction to Computational Social Science",
    "section": "👨‍🏫 Lecture Slides",
    "text": "👨‍🏫 Lecture Slides\nEither click on the slide area below or click here to view it in fullscreen. Use your keypad to navigate the slides.\n\n\n\n\n🎥 Looking for lecture recordings? You can only find those on Moodle."
  },
  {
    "objectID": "2025/weeks/week01/page.html#lab-materials",
    "href": "2025/weeks/week01/page.html#lab-materials",
    "title": "🗓️ Week 01 - Introduction to Computational Social Science",
    "section": "✍️ Lab Materials",
    "text": "✍️ Lab Materials\n🚧 Come back after the lecture to read the practicals for the week 🚧"
  },
  {
    "objectID": "2025/weeks/week01/page.html#required-reading",
    "href": "2025/weeks/week01/page.html#required-reading",
    "title": "🗓️ Week 01 - Introduction to Computational Social Science",
    "section": "📚 Required Reading",
    "text": "📚 Required Reading\n\nEdelman, A., Wolff, T., Montagne, D. & Bail, C. A. (2020). Computational Social Science and Sociology, Annual Review of Sociology.\nBryan, J. (2018), Happy Git and GitHub for the useR, GitHub."
  },
  {
    "objectID": "2025/weeks/week02/page2.html",
    "href": "2025/weeks/week02/page2.html",
    "title": "🗓️ Week 02 - Computational Thinking and Reproducibility",
    "section": "",
    "text": "This week will introduce students to how to think computationally, data structures, and project workflow (linking R projects to GitHub), focusing on reproducibility. Students will also be shown how to load and update relevant data science libraries into R."
  },
  {
    "objectID": "2025/weeks/week02/page2.html#lecture-slides",
    "href": "2025/weeks/week02/page2.html#lecture-slides",
    "title": "🗓️ Week 02 - Computational Thinking and Reproducibility",
    "section": "👨‍🏫 Lecture Slides",
    "text": "👨‍🏫 Lecture Slides\nEither click on the slide area below or click here to view it in fullscreen. Use your keypad to navigate the slides.\n\n\n\n\n🎥 Looking for lecture recordings? You can only find those on Moodle."
  },
  {
    "objectID": "2025/weeks/week02/page2.html#lab-materials",
    "href": "2025/weeks/week02/page2.html#lab-materials",
    "title": "🗓️ Week 02 - Computational Thinking and Reproducibility",
    "section": "✍️ Lab Materials",
    "text": "✍️ Lab Materials\n🚧 Students will create an RStudio project with a solid workflow, while practicing the principles of reproducibility.🚧"
  },
  {
    "objectID": "2025/weeks/week02/page2.html#required-reading",
    "href": "2025/weeks/week02/page2.html#required-reading",
    "title": "🗓️ Week 02 - Computational Thinking and Reproducibility",
    "section": "📚 Required Reading",
    "text": "📚 Required Reading\n\nChristensen, G., Freese, J., & Miguel, E. (2019). Transparent and Reproducible Social Science Research: How to Do Open Science. University of California Press. (Chapter 10 & 11).\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for data science. ” O’Reilly Media, Inc.”. (Chapter 7)."
  },
  {
    "objectID": "2025/weeks/week03/page3.html",
    "href": "2025/weeks/week03/page3.html",
    "title": "🗓️ Week 03 ->Wrangling and Tidying Data",
    "section": "",
    "text": "How to effectively use Tidyverse – the key R functions for data wrangling. This week will introduce students to tidying data in R. This will include learning about transforming data frames; tidying data in a specific format; merging and appending multiple datasets; and other aspects of data manipulation."
  },
  {
    "objectID": "2025/weeks/week03/page3.html#lecture-slides",
    "href": "2025/weeks/week03/page3.html#lecture-slides",
    "title": "🗓️ Week 03 ->Wrangling and Tidying Data",
    "section": "👨‍🏫 Lecture Slides",
    "text": "👨‍🏫 Lecture Slides\nEither click on the slide area below or click here to view it in fullscreen. Use your keypad to navigate the slides.\n\n\n\n\n🎥 Looking for lecture recordings? You can only find those on Moodle."
  },
  {
    "objectID": "2025/weeks/week03/page3.html#lab-materials",
    "href": "2025/weeks/week03/page3.html#lab-materials",
    "title": "🗓️ Week 03 ->Wrangling and Tidying Data",
    "section": "✍️ Lab Materials",
    "text": "✍️ Lab Materials\n🚧 Students will be working with real world datasets to complete a series of data wrangling tasks through Tidyverse packages.🚧"
  },
  {
    "objectID": "2025/weeks/week03/page3.html#required-reading",
    "href": "2025/weeks/week03/page3.html#required-reading",
    "title": "🗓️ Week 03 ->Wrangling and Tidying Data",
    "section": "📚 Required Reading",
    "text": "📚 Required Reading\n\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for data science. ” O’Reilly Media, Inc.”. (Chapter 6, 8, and 9).\nWickham, H., Averick, M., Bryan, J., Chang, W., McGowan, L. D. A., François, R., … & Yutani, H. (2019). Welcome to the Tidyverse. Journal of open source software, 4(43), 1686."
  },
  {
    "objectID": "2025/weeks/week04/page4.html",
    "href": "2025/weeks/week04/page4.html",
    "title": "🗓️ Week 04 -Automating (functional programming)",
    "section": "",
    "text": "The aim of this week is to introduce students to more advanced programming, such as familiarity with conditional flow (e.g. if-else conditionals) and creating functions to automate some common tasks for data wrangling and plotting. Students will be shown how they can use these functions in data science projects to make their project workflow more efficient."
  },
  {
    "objectID": "2025/weeks/week04/page4.html#lecture-slides",
    "href": "2025/weeks/week04/page4.html#lecture-slides",
    "title": "🗓️ Week 04 -Automating (functional programming)",
    "section": "👨‍🏫 Lecture Slides",
    "text": "👨‍🏫 Lecture Slides\nEither click on the slide area below or click here to view it in fullscreen. Use your keypad to navigate the slides.\n\n\n\n\n🎥 Looking for lecture recordings? You can only find those on Moodle."
  },
  {
    "objectID": "2025/weeks/week04/page4.html#lab-materials",
    "href": "2025/weeks/week04/page4.html#lab-materials",
    "title": "🗓️ Week 04 -Automating (functional programming)",
    "section": "✍️ Lab Materials",
    "text": "✍️ Lab Materials\n🚧 Students will be asked to use computational tools to automate repeated things in their entire R workflow (e.g. wrangling, visualisation).🚧"
  },
  {
    "objectID": "2025/weeks/week04/page4.html#required-reading",
    "href": "2025/weeks/week04/page4.html#required-reading",
    "title": "🗓️ Week 04 -Automating (functional programming)",
    "section": "📚 Required Reading",
    "text": "📚 Required Reading\n\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for data science. ” O’Reilly Media, Inc.”. (Chapter 26 & 27)."
  },
  {
    "objectID": "2025/weeks/week05/page5.html",
    "href": "2025/weeks/week05/page5.html",
    "title": "🗓️ Week 05 ->Improving Workflow for Reproducible Social Science",
    "section": "",
    "text": "Student will learn how to combine code, output, and analysis into a single reproducible document through Quarto. They will also learn how to customise appearance and style in reproducible documents. This will help students deliver their assessments in different reproducible output formats."
  },
  {
    "objectID": "2025/weeks/week05/page5.html#lecture-slides",
    "href": "2025/weeks/week05/page5.html#lecture-slides",
    "title": "🗓️ Week 05 ->Improving Workflow for Reproducible Social Science",
    "section": "👨‍🏫 Lecture Slides",
    "text": "👨‍🏫 Lecture Slides\nEither click on the slide area below or click here to view it in fullscreen. Use your keypad to navigate the slides.\n\n\n\n\n🎥 Looking for lecture recordings? You can only find those on Moodle."
  },
  {
    "objectID": "2025/weeks/week05/page5.html#lab-materials",
    "href": "2025/weeks/week05/page5.html#lab-materials",
    "title": "🗓️ Week 05 ->Improving Workflow for Reproducible Social Science",
    "section": "✍️ Lab Materials",
    "text": "✍️ Lab Materials\n🚧 Students will complete certain tasks to create a single reproducible document through Quarto.🚧"
  },
  {
    "objectID": "2025/weeks/week05/page5.html#required-reading",
    "href": "2025/weeks/week05/page5.html#required-reading",
    "title": "🗓️ Week 05 ->Improving Workflow for Reproducible Social Science",
    "section": "📚 Required Reading",
    "text": "📚 Required Reading\n\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (2023). R for data science. ” O’Reilly Media, Inc.”. (Chapter 29 & 30).\nBauer, P. C., & Landesvatter, C. (2023). Writing a reproducible paper with RStudio and Quarto."
  },
  {
    "objectID": "2025/weeks/week06/page6.html",
    "href": "2025/weeks/week06/page6.html",
    "title": "🗓️ Week 06 ->From Reproducibility to Interactivity",
    "section": "",
    "text": "Students will learn advanced data visualisation tools. They will specifically learn how to build and deploy Shiny apps to create interactive data visualisations. This will help students create interactive dashboards to disseminate their data in the projects."
  },
  {
    "objectID": "2025/weeks/week06/page6.html#lecture-slides",
    "href": "2025/weeks/week06/page6.html#lecture-slides",
    "title": "🗓️ Week 06 ->From Reproducibility to Interactivity",
    "section": "👨‍🏫 Lecture Slides",
    "text": "👨‍🏫 Lecture Slides\nEither click on the slide area below or click here to view it in fullscreen. Use your keypad to navigate the slides.\n\n\n\n\n🎥 Looking for lecture recordings? You can only find those on Moodle."
  },
  {
    "objectID": "2025/weeks/week06/page6.html#lab-materials",
    "href": "2025/weeks/week06/page6.html#lab-materials",
    "title": "🗓️ Week 06 ->From Reproducibility to Interactivity",
    "section": "✍️ Lab Materials",
    "text": "✍️ Lab Materials\n🚧 Students will build their own interactive dashboards through Shiny apps.🚧"
  },
  {
    "objectID": "2025/weeks/week06/page6.html#required-reading",
    "href": "2025/weeks/week06/page6.html#required-reading",
    "title": "🗓️ Week 06 ->From Reproducibility to Interactivity",
    "section": "📚 Required Reading",
    "text": "📚 Required Reading\n\nWickham, H. (2021). Mastering shiny. ” O’Reilly Media, Inc.”. (Chapter 1, 2, 3, and 7)."
  },
  {
    "objectID": "2025/weeks/week07/page7.html",
    "href": "2025/weeks/week07/page7.html",
    "title": "🗓️ Week 07 ->>Automated Data Collection I",
    "section": "",
    "text": "Introduction to automated data collection with R (rvest package). This week students will be introduced the concepts of ethical Webscraping and semi-structured data in detail, such as HTML (e.g., websites) and XML (e.g., government data)."
  },
  {
    "objectID": "2025/weeks/week07/page7.html#lecture-slides",
    "href": "2025/weeks/week07/page7.html#lecture-slides",
    "title": "🗓️ Week 07 ->>Automated Data Collection I",
    "section": "👨‍🏫 Lecture Slides",
    "text": "👨‍🏫 Lecture Slides\nEither click on the slide area below or click here to view it in fullscreen. Use your keypad to navigate the slides.\n\n\n\n\n🎥 Looking for lecture recordings? You can only find those on Moodle."
  },
  {
    "objectID": "2025/weeks/week07/page7.html#lab-materials",
    "href": "2025/weeks/week07/page7.html#lab-materials",
    "title": "🗓️ Week 07 ->>Automated Data Collection I",
    "section": "✍️ Lab Materials",
    "text": "✍️ Lab Materials\n🚧 Students will extract some texts, links, and tables from static webpages.🚧"
  },
  {
    "objectID": "2025/weeks/week07/page7.html#required-reading",
    "href": "2025/weeks/week07/page7.html#required-reading",
    "title": "🗓️ Week 07 ->>Automated Data Collection I",
    "section": "📚 Required Reading",
    "text": "📚 Required Reading\n\nHalavais, A. (2019). Overcoming terms of service: a proposal for ethical distributed research. Information, Communication & Society, 22(11), 1567-1581.\nWickham, H. (2019). rvest: Easily harvest (scrape) web pages. Retrieved from https://CRAN.R-project.org/package=rvest."
  },
  {
    "objectID": "2025/weeks/week08/page8.html",
    "href": "2025/weeks/week08/page8.html",
    "title": "🗓️ Week 08 ->>Automated Data Collection II",
    "section": "",
    "text": "Webscraping part 2 with RSelenium library. Students will learn how to scrape dynamic webpages that pull data from databases using Javascript. They will simulate web browsing rather than parsing static pages."
  },
  {
    "objectID": "2025/weeks/week08/page8.html#lecture-slides",
    "href": "2025/weeks/week08/page8.html#lecture-slides",
    "title": "🗓️ Week 08 ->>Automated Data Collection II",
    "section": "👨‍🏫 Lecture Slides",
    "text": "👨‍🏫 Lecture Slides\nEither click on the slide area below or click here to view it in fullscreen. Use your keypad to navigate the slides.\n\n\n\n\n🎥 Looking for lecture recordings? You can only find those on Moodle."
  },
  {
    "objectID": "2025/weeks/week08/page8.html#lab-materials",
    "href": "2025/weeks/week08/page8.html#lab-materials",
    "title": "🗓️ Week 08 ->>Automated Data Collection II",
    "section": "✍️ Lab Materials",
    "text": "✍️ Lab Materials\n🚧 They will extract various types of data from a dynamic webpage.🚧"
  },
  {
    "objectID": "2025/weeks/week08/page8.html#required-reading",
    "href": "2025/weeks/week08/page8.html#required-reading",
    "title": "🗓️ Week 08 ->>Automated Data Collection II",
    "section": "📚 Required Reading",
    "text": "📚 Required Reading\n\nBreuer, J., Bishop, L., & Kinder-Kurlanda, K. (2020). The practical and ethical challenges in acquiring and sharing digital trace data: Negotiating public-private partnerships. New Media & Society, 22(11), 2058-2080.\nHarrison J (2022). RSelenium: R Bindings for ‘Selenium WebDriver’. R package version 1.7.9, https://docs.ropensci.org/RSelenium/."
  },
  {
    "objectID": "2025/weeks/week09/page9.html",
    "href": "2025/weeks/week09/page9.html",
    "title": "🗓️ Week 09 ->>Working with APIs",
    "section": "",
    "text": "Students will be introduced multiple APIs to collect data from digital platforms and how they can access them through R."
  },
  {
    "objectID": "2025/weeks/week09/page9.html#lecture-slides",
    "href": "2025/weeks/week09/page9.html#lecture-slides",
    "title": "🗓️ Week 09 ->>Working with APIs",
    "section": "👨‍🏫 Lecture Slides",
    "text": "👨‍🏫 Lecture Slides\nEither click on the slide area below or click here to view it in fullscreen. Use your keypad to navigate the slides.\n\n\n\n\n🎥 Looking for lecture recordings? You can only find those on Moodle."
  },
  {
    "objectID": "2025/weeks/week09/page9.html#lab-materials",
    "href": "2025/weeks/week09/page9.html#lab-materials",
    "title": "🗓️ Week 09 ->>Working with APIs",
    "section": "✍️ Lab Materials",
    "text": "✍️ Lab Materials\n🚧 They will set up a developer account to access APIs to pull data from the platforms.🚧"
  },
  {
    "objectID": "2025/weeks/week09/page9.html#required-reading",
    "href": "2025/weeks/week09/page9.html#required-reading",
    "title": "🗓️ Week 09 ->>Working with APIs",
    "section": "📚 Required Reading",
    "text": "📚 Required Reading\n\nBruns, A. (2019). After the ‘APIcalypse’: Social media platforms and their fight against critical scholarly research. Information, Communication & Society, 22(11), 1544-1566.\nPrado-Román, C., Gómez-Martínez, R., & Orden-Cruz, C. (2021). Google Trends as a predictor of presidential elections: The United States versus Canada. American Behavioral Scientist, 65(4), 666-680."
  },
  {
    "objectID": "2025/workshop/rworkshop/page.html",
    "href": "2025/workshop/rworkshop/page.html",
    "title": "🗓️ A Gentle Introduction to R",
    "section": "",
    "text": "In preparation for the module you should begin completing the introductory R workshop. This workshop is designed for those who have no prior knowledge in R. Hence, please feel free to skip the parts if you feel confident about the introductory knowledge."
  },
  {
    "objectID": "2025/workshop/rworkshop/page.html#workshop-slides",
    "href": "2025/workshop/rworkshop/page.html#workshop-slides",
    "title": "🗓️ A Gentle Introduction to R",
    "section": "👨‍🏫 Workshop Slides",
    "text": "👨‍🏫 Workshop Slides\nEither click on the slide area below or click here to view it in fullscreen. Use your keypad to navigate the slides.\n\n\n\n\n🎥 Looking for the workshop recording? You can only find those on Moodle."
  }
]